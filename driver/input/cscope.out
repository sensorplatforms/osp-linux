cscope 15 $HOME/work/src/osp-input-driver/osp/linux/driver               0000141833
	@MQ_sensors.h

33 #i‡!
deföed
 (
MQ_SENSORS_H
)

34 
	#MQ_SENSORS_H


	)

46 
	#SENSOR_SUBTYPE_UNUSED
 0

47 
	#SENSOR_SUBTYPE_START
 1

48 
	#SENSOR_DEVICE_PRIVATE_BASE
 0x10000

49 

	)

50 
	#M_PSís‹ToAndroidBa£
(
ty≥
Ë(—y≥Ë| 
SENSOR_DEVICE_PRIVATE_BASE
)

	)

69 
	e_ASís‹Ty≥
 {

70 
	mSENSOR_META_DATA
 = 0,

71 
	mSENSOR_ACCELEROMETER
 = 1,

72 
	mSENSOR_GEOMAGNETIC_FIELD
 = 2,

73 
	mSENSOR_MAGNETIC_FIELD
 = 
SENSOR_GEOMAGNETIC_FIELD
,

74 
	mSENSOR_ORIENTATION
 = 3,

75 
	mSENSOR_GYROSCOPE
 = 4,

76 
	mSENSOR_LIGHT
 = 5,

77 
	mSENSOR_PRESSURE
 = 6,

78 
	mSENSOR_TEMPERATURE
 = 7,

79 
	mSENSOR_PROXIMITY
 = 8,

80 
	mSENSOR_GRAVITY
 = 9,

81 
	mSENSOR_LINEAR_ACCELERATION
 = 10,

82 
	mSENSOR_ROTATION_VECTOR
 = 11,

83 
	mSENSOR_RELATIVE_HUMIDITY
 = 12,

84 
	mSENSOR_AMBIENT_TEMPERATURE
 = 13,

85 
	mSENSOR_MAGNETIC_FIELD_UNCALIBRATED
 = 14,

86 
	mSENSOR_GAME_ROTATION_VECTOR
 = 15,

87 
	mSENSOR_GYROSCOPE_UNCALIBRATED
 = 16,

88 
	mSENSOR_SIGNIFICANT_MOTION
 = 17,

89 
	mSENSOR_STEP_DETECTOR
 = 18,

90 
	mSENSOR_STEP_COUNTER
 = 19,

91 
	mSENSOR_GEOMAGNETIC_ROTATION_VECTOR
 = 20,

93 
	mNUM_ANDROID_SENSOR_TYPE


94 } 
	tASís‹Ty≥_t
;

97 
	e_PSís‹Ty≥
 {

98 
	mPSENSOR_ENUM_FIRST_SENSOR
 = 0,

100 
	mPSENSOR_DEBUG_TUNNEL
 = 
PSENSOR_ENUM_FIRST_SENSOR
,

101 
	mPSENSOR_ACCELEROMETER_RAW
 = 1,

102 
	mPSENSOR_MAGNETIC_FIELD_RAW
 = 2,

103 
	mPSENSOR_GYROSCOPE_RAW
 = 3,

104 
	mPSENSOR_LIGHT_UV
 = 4,

105 
	mPSENSOR_LIGHT_RGB
 = 5,

106 
	mPSENSOR_STEP
 = 6,

107 
	mPSENSOR_ACCELEROMETER_UNCALIBRATED
 = 7,

108 
	mPSENSOR_ORIENTATION
 = 8,

109 
	mPSENSOR_CONTEXT_DEVICE_MOTION
 = 9,

110 
	mPSENSOR_CONTEXT_CARRY
 = 10,

111 
	mPSENSOR_CONTEXT_POSTURE
 = 11,

112 
	mPSENSOR_CONTEXT_TRANSPORT
 = 12,

113 
	mPSENSOR_GESTURE_EVENT
 = 13,

114 
	mPSENSOR_HEART_RATE
 = 15,

115 
	mSYSTEM_REAL_TIME_CLOCK
 = 16,

117 
	mNUM_PRIVATE_SENSOR_TYPE


118 } 
	tPSís‹Ty≥_t
;

121 
	e_Sís‹P¨amId
 {

122 
	mSENSOR_PARAM_ERROR_CODE
 = 0,

123 
	mSENSOR_PARAM_OFFSET
 = 1,

124 
	mSENSOR_PARAM_DATA_RATE
 = 2,

125 
	mSENSOR_PARAM_BAND_WIDTH
 = 3,

126 
	mSENSOR_PARAM_HP_FILTER
 = 4,

127 
	mSENSOR_PARAM_LP_FILTER
 = 5,

128 
	mSENSOR_PARAM_ENABLE
 = 6,

130 
	mNUM_SENSOR_PARAM


131 } 
	tSís‹P¨amId_t
;

135 
	e_SãpSubTy≥
 {

136 
	mCONTEXT_STEP
 = 
SENSOR_SUBTYPE_START
,

137 
	mSTEP_SEGMENT_DETECTOR
,

139 
	mNUM_PSENSOR_STEP_SUBTYPE


140 } 
	tSãpSubTy≥_t
;

143 
	e_C⁄ãxtDevi˚MŸi⁄SubTy≥
 {

144 
	mCONTEXT_DEVICE_MOTION_STILL
 = 
SENSOR_SUBTYPE_START
,

145 
	mCONTEXT_DEVICE_MOTION_ACCELERATING
,

146 
	mCONTEXT_DEVICE_MOTION_ROTATING
,

147 
	mCONTEXT_DEIVCE_MOTION_TRANSLATING
,

148 
	mCONTEXT_DEVICE_MOTION_FREE_FALLING
,

149 
	mCONTEXT_DEVICE_MOTION_SIGNIFICANT_MOTION
,

150 
	mCONTEXT_DEVICE_MOTION_SIGNIFICANT_STILLNESS
,

151 
	mCONTEXT_DEVICE_MOTION_CHANGE_DETECTOR
,

153 
	mNUM_PSENSOR_CONTEXT_DEVICE_MOTION_SUBTYPE


154 } 
	tC⁄ãxtDevi˚MŸi⁄SubTy≥_t
;

157 
	e_C⁄ãxtC¨rySubTy≥
 {

158 
	mCONTEXT_CARRY_IN_POCKET
 = 
SENSOR_SUBTYPE_START
,

159 
	mCONTEXT_CARRY_IN_HAND
,

160 
	mCONTEXT_CARRY_NOT_ON_PERSON
,

161 
	mCONTEXT_CARRY_IN_HAND_FRONT
,

162 
	mCONTEXT_CARRY_IN_HAND_SIDE
,

164 
	mNUM_PSENSOR_CONTEXT_CARRY_SUBTYPE


165 } 
	tC⁄ãxtC¨rySubTy≥_t
;

168 
	e_C⁄ãxtPo°uªSubTy≥
 {

169 
	mCONTEXT_POSTURE_WALKING
 = 
SENSOR_SUBTYPE_START
,

170 
	mCONTEXT_POSTURE_STANDING
,

171 
	mCONTEXT_POSTURE_SITTING
,

172 
	mCONTEXT_POSTURE_JOGGING
,

173 
	mCONTEXT_POSTURE_RUNNING
,

175 
	mNUM_PSENSOR_CONTEXT_POSTURE_SUBTYPE


176 } 
	tC⁄ãxtPo°uªSubTy≥_t
;

180 
	e_C⁄ãxtTøn•‹tSubTy≥
 {

181 
	mCONTEXT_TRANSPORT_VEHICLE
 = 
SENSOR_SUBTYPE_START
,

182 
	mCONTEXT_TRANSPORT_CAR
,

183 
	mCONTEXT_TRANSPORT_TRAIN
,

184 
	mCONTEXT_TRANSPORT_UP_STAIRS
,

185 
	mCONTEXT_TRANSPORT_DOWN_STAIRS
,

186 
	mCONTEXT_TRANSPORT_UP_ELEVATOR
,

187 
	mCONTEXT_TRANSPORT_DOWN_ELEVATOR
,

188 
	mCONTEXT_TRANSPORT_ON_BIKE
,

190 
	mNUM_PSENSOR_CONTEXT_TRANSPORT_SUBTYPE


191 } 
	tC⁄ãxtTøn•‹tSubTy≥_t
;

194 
	e_Ge°uªSubTy≥
 {

195 
	mSENSOR_GESTURE_TAP
 = 
SENSOR_SUBTYPE_START
,

196 
	mSENSOR_GESTURE_DOUBLE_TAP
,

197 
	mSENSOR_GESTURE_SHAKE
,

199 
	mNUM_PSENSOR_GESTURE_SUBTYPE


200 } 
	tGe°uªSubTy≥_t
;

203 
	u_TimeSèmp
 {

204 
uöt64_t
 
	mTS64
;

205 
uöt32_t
 
	mTS32
[2];

206 
uöt8_t
 
	mTS8
[8];

207 } 
	tTimeSèmp_t
;

210 
	sTriAxisRawD©a_t


212 
TimeSèmp_t
 
	mTSèmp
;

213 
öt32_t
 
	mAxis
[3];

214 } 
	tTriAxisRawD©a_t
;

	@SensorPackets.h

33 #i‡!
deföed
 (
SENSOR_PACKETS_H
)

34 
	#SENSOR_PACKETS_H


	)

40 
	~<°döt.h
>

41 
	~<°ddef.h
>

43 
	~"MQ_£ns‹s.h
"

52 
	#PKID_SENSOR_DATA
 0x00

	)

53 
	#PKID_CONTROL_REQ
 0x10

	)

54 
	#PKID_CONTROL_RESP
 0x20

	)

55 
	#PKID_TEST_DATA
 0x30

	)

56 
	#PKID_MASK_VER0
 0xF0

	)

59 
	#M_GëSís‹Ty≥
(
i
Ë((
uöt8_t
)((ò>> 16 ) & 0x01))

	)

60 
	#SENSOR_TYPE_ANDROID
 0x0

	)

61 
	#SENSOR_TYPE_PRIVATE
 0x1

	)

63 
	#M_Sís‹MëaD©a
(
i
Ë((
uöt8_t
)((ò<< 6Ë& 0xC0))

	)

64 
	#M_P¨£Sís‹MëaD©a
(
i
Ë((
uöt8_t
)((ò>> 6Ë& 0x03))

	)

65 
	#M_Sís‹Ty≥
(
s
Ë((
uöt8_t
)(†& 0x3F))

	)

68 
	#M_Sís‹SubTy≥
(
°
Ë((
uöt8_t
)((° << 4Ë& 0xF0))

	)

69 
	#M_P¨£Sís‹SubTy≥
(
°
Ë((
uöt8_t
)((° >> 4Ë& 0x0F))

	)

72 
	#CHECK_SUM_PRESENT
 0x01

	)

79 
	#CRC_ENABLE
 0x08

	)

82 
	#SENSOR_ANDROID_TYPE_MASK
 0x01

	)

85 
	#DATA_FORMAT_RAW
 0x00

	)

86 
	#DATA_FORMAT_FIXPOINT
 0x04

	)

87 
	#DATA_FORMAT_MASK
 0x04

	)

90 
	#TIME_FORMAT_RAW
 0x00

	)

91 
	#TIME_FORMAT_FIXPOINT
 0x02

	)

92 
	#TIME_FORMAT_MASK
 0x02

	)

95 
	#META_DATA_UNUSED
 0x00

	)

96 
	#META_DATA_OFFSET_CHANGE
 0x01

	)

100 
	#DATA_SIZE_8_BIT
 0x00

	)

101 
	#DATA_SIZE_16_BIT
 0x02

	)

102 
	#DATA_SIZE_32_BIT
 0x04

	)

103 
	#DATA_SIZE_64_BIT
 0x06

	)

104 
	#DATA_SIZE_MASK
 0x06

	)

107 
	#TIME_STAMP_32_BIT
 0x00

	)

108 
	#TIME_STAMP_64_BIT
 0x01

	)

109 
	#TIME_STAMP_SIZE_MASK
 0x01

	)

117 
	#CTRL_PKT_DF_INTEGER
 0x00

	)

118 
	#CTRL_PKT_DF_FIXPOINT
 0x02

	)

119 
	#CTRL_PKT_DF_FLOAT
 0x04

	)

120 
	#CTRL_PKT_DF_DOUBLE
 0x06

	)

126 
	#M_Sequí˚Num
(
sNum
Ë((sNumË& 0x0F)

	)

130 
	#M_GëP¨amId
(
AârByã2
Ë((AârByã2Ë>> 3)

	)

131 
	#M_SëP¨amId
(
id
Ë(((idË& 0x1FË<< 3)

	)

134 
	#M_GëP¨amSize
(
AârByã2
Ë((AârByã2Ë& 0x07)

	)

137 
	#PARAM_DATA_SZ_8_BIT
 0x00

	)

138 
	#PARAM_DATA_SZ_16_BIT
 0x01

	)

139 
	#PARAM_DATA_SZ_32_BIT
 0x02

	)

140 
	#PARAM_DATA_SZ_64_BIT
 0x03

	)

141 
	#PARAM_DATA_SZ_BOOL_FALSE
 0x04

	)

142 
	#PARAM_DATA_SZ_BOOL_TRUE
 0x05

	)

143 
	#PARAM_DATA_SZ_UNKNOWN
 0x07

	)

147 
	#BYTE3
(
x
Ë((
uöt8_t
)((x >> 24Ë& 0xFF))

	)

148 
	#BYTE2
(
x
Ë((
uöt8_t
)((x >> 16Ë& 0xFF))

	)

149 
	#BYTE1
(
x
Ë((
uöt8_t
)((x >> 8Ë& 0xFF))

	)

150 
	#BYTE0
(
x
Ë((
uöt8_t
)(x & 0xFF))

	)

153 
	#BYTES_TO_SHORT
(
b1
,
b0
Ë((
öt16_t
)(((öt16_t)b1 << 8Ë| b0))

	)

154 
	#BYTES_TO_LONG_ARR
(
¨r
,
öd
Ë
	`BYTES_TO_LONG
◊º[öd],¨r[öd+1],¨r[öd+2],¨r[öd+3])

	)

155 
	#BYTES_TO_LONG
(
b3
,
b2
,
b1
,
b0
) \

156 ((
öt32_t
)(((öt32_t)
b3
 << 24Ë| ((
uöt32_t
)
b2
 << 16Ë| ((uöt32_t)
b1
 << 8Ë| 
b0
))

	)

162 
	s_Qu©îni⁄FixP
 {

163 
TimeSèmp_t
 
	mTimeSèmp
;

164 
öt32_t
 
	mQu©
[4];

165 } 
	tQu©îni⁄FixP_t
;

167 
	s_UnˇlibøãdFixP
 {

168 
TimeSèmp_t
 
	mTimeSèmp
;

169 
öt32_t
 
	mAxis
[3];

170 
öt32_t
 
	mOff£t
[3];

171 } 
	tUnˇlibøãdFixP_t
;

173 
	s_CÆibøãdFixP
 {

174 
TimeSèmp_t
 
	mTimeSèmp
;

175 
öt32_t
 
	mAxis
[3];

176 } 
	tCÆibøãdFixP_t
;

179 
	s_Sís‹PackëTy≥s
 {

181 
TriAxisRawD©a_t
 
	mRawSís‹
;

182 
UnˇlibøãdFixP_t
 
	mUnˇlFixP
;

183 
CÆibøãdFixP_t
 
	mCÆFixP
;

184 
Qu©îni⁄FixP_t
 
	mQu©FixP
;

185 } 
	mP
;

186 
ASís‹Ty≥_t
 
	mSTy≥
;

187 
uöt8_t
 
	mSubTy≥
;

188 } 
	tSís‹PackëTy≥s_t
;

197 
	s_HifSís‹PktQuÆifõr
 {

198 
uöt8_t
 
	mC⁄åﬁByã
;

199 
uöt8_t
 
	mSís‹IdByã
;

200 
uöt8_t
 
	mAâribuãByã
;

201 } 
	tHifSn§PktQuÆifõr_t
;

204 
	s_HifSís‹D©aRaw
 {

205 
HifSn§PktQuÆifõr_t
 
	mQ
;

206 
uöt8_t
 
	mTimeSèmp
[4];

207 
uöt8_t
 
	mD©aRaw
[6];

208 } 
	tHifSís‹D©aRaw_t
;

210 
	#SENSOR_RAW_DATA_PKT_SZ
 (
HifSís‹D©aRaw_t
)

	)

213 
	s_HifUnˇlibøãdFixPoöt
 {

214 
HifSn§PktQuÆifõr_t
 
	mQ
;

215 
uöt8_t
 
	mTimeSèmp
[8];

216 
uöt8_t
 
	mD©a
[12];

217 
uöt8_t
 
	mOff£t
[12];

218 } 
	tHifUnˇlibøãdFixPoöt_t
;

220 
	#UNCALIB_FIXP_DATA_PKT_SZ
 (
	`off£tof
(
HifUnˇlibøãdFixPoöt_t
, 
Off£t
))

	)

221 
	#UNCALIB_FIXP_DATA_OFFSET_PKT_SZ
 (
HifUnˇlibøãdFixPoöt_t
)

	)

224 
	s_HifCÆibøãdFixPoöt
 {

225 
HifSn§PktQuÆifõr_t
 
	mQ
;

226 
uöt8_t
 
	mTimeSèmp
[8];

227 
uöt8_t
 
	mD©a
[12];

228 } 
	tHifCÆibøãdFixPoöt_t
;

230 
	#CALIBRATED_FIXP_DATA_PKT_SZ
 (
HifCÆibøãdFixPoöt_t
)

	)

233 
	s_HifQu©îni⁄FixPoöt
 {

234 
HifSn§PktQuÆifõr_t
 
	mQ
;

235 
uöt8_t
 
	mTimeSèmp
[8];

236 
uöt8_t
 
	mD©a
[16];

237 } 
	tHifQu©îni⁄FixPoöt_t
;

239 
	#QUATERNION_FIXP_DATA_PKT_SZ
 (
HifQu©îni⁄FixPoöt_t
)

	)

242 
	s_HifSís‹E«bÀ
 {

243 
HifSn§PktQuÆifõr_t
 
	mQ
;

244 
uöt8_t
 
	mAârByã2
;

245 } 
	tHifSís‹E«bÀ_t
;

247 
	#SENSOR_ENABLE_REQ_PKT_SZ
 (
HifSís‹E«bÀ_t
)

	)

250 
	u_Ho°IFPackës
 {

251 
HifSís‹D©aRaw_t
 
	mSísPktRaw
;

252 
HifUnˇlibøãdFixPoöt_t
 
	mUnˇlPktFixP
;

253 
HifCÆibøãdFixPoöt_t
 
	mCÆPktFixP
;

254 
HifQu©îni⁄FixPoöt_t
 
	mQu©PktFixP
;

255 
HifSís‹E«bÀ_t
 
	mE«bÀ
;

256 } 
	tHo°IFPackës_t
;

269 
öt16_t
 
F‹m©Sís‹D©aPktRaw
–
uöt8_t
 *
pDe°
, c⁄° 
TriAxisRawD©a_t
 *
pSísD©a
, uöt8_à
mëaD©a
, 
ASís‹Ty≥_t
 
sTy≥
, uöt8_à
subTy≥
 );

270 
öt16_t
 
F‹m©Qu©îni⁄PktFixP
–
uöt8_t
 *
pDe°
, c⁄° 
Qu©îni⁄FixP_t
 *
pQu©D©a
, 
ASís‹Ty≥_t
 
sTy≥
 );

271 
öt16_t
 
F‹m©UnˇlibøãdPktFixP
–
uöt8_t
 *
pDe°
, c⁄° 
UnˇlibøãdFixP_t
 *
pUnˇlD©a
, uöt8_à
mëaD©a
, 
ASís‹Ty≥_t
 
sTy≥
 );

272 
öt16_t
 
F‹m©CÆibøãdPktFixP
–
uöt8_t
 *
pDe°
, c⁄° 
CÆibøãdFixP_t
 *
pCÆD©a
, 
ASís‹Ty≥_t
 
sTy≥
 );

273 
öt16_t
 
P¨£Ho°I¡eÁ˚Pkt
–
Sís‹PackëTy≥s_t
 *
pOut
, 
uöt8_t
 *
pPackë
, 
uöt16_t
 
pktSize
 );

	@osp-sh.c

20 
	~<löux/dñay.h
>

21 
	~<löux/i2c.h
>

22 
	~<löux/öput.h
>

23 
	~<löux/öãºu±.h
>

24 
	~<löux/moduÀ.h
>

25 
	~<löux/¶ab.h
>

26 
	~<löux/öput-pﬁldev.h
>

27 
	~<löux/w‹kqueue.h
>

28 
	~"MQ_£ns‹s.h
"

29 
	~"Sís‹Packës.h
"

30 
	~"o•_i2c_m≠.h
"

32 
	#NAME
 "o•sh"

	)

34 
	#FUZZ
 3

	)

35 
	#FLAT
 3

	)

36 
	#G_MAX
 8000

	)

38 *
	gö_«me
[
NUM_ANDROID_SENSOR_TYPE
] = {

39 [
SENSOR_ACCELEROMETER
] = "fm-accelerometer",

40 [
SENSOR_MAGNETIC_FIELD
] = "fm-magnetometer",

41 [
SENSOR_GYROSCOPE
] = "fm-gyroscope",

42 [
SENSOR_ROTATION_VECTOR
] = "fm-rotation-vector",

43 [
SENSOR_MAGNETIC_FIELD_UNCALIBRATED
] = "fm-uncalibrated-magnetometer",

44 [
SENSOR_GYROSCOPE_UNCALIBRATED
] = "fm-uncalibrated-gyroscope",

45 [
SENSOR_ORIENTATION
] = "fm-compass-orientation",

46 [
SENSOR_LINEAR_ACCELERATION
] = "fm-linear-acceleration",

47 [
SENSOR_GRAVITY
] = "fm-gravity",

48 [
SENSOR_STEP_COUNTER
] = "fm-step-counter",

49 [
SENSOR_STEP_DETECTOR
] = "fm-step-detector",

50 [
SENSOR_SIGNIFICANT_MOTION
] = "fm-significant-motion",

51 [
SENSOR_PRESSURE
] = "pressure",

52 [
SENSOR_GEOMAGNETIC_ROTATION_VECTOR
] = "fm-geomagnetic-rotation-vector",

53 [
SENSOR_GAME_ROTATION_VECTOR
] = "fm-game-rotation-vector",

56 *
	gö_≤ame
[
NUM_PRIVATE_SENSOR_TYPE
] = {

57 [
PSENSOR_ACCELEROMETER_RAW
] = "acc_raw",

58 [
PSENSOR_ACCELEROMETER_UNCALIBRATED
] = "acc_uncal",

72 
	$OSP_P¨£Sís‹D©aPkt_Priv©e
(

73 
Sís‹PackëTy≥s_t
 *
pOut
,

74 
Ho°IFPackës_t
 *
pHif
,

75 
ASís‹Ty≥_t
 
£nsTy≥
,

76 
uöt8_t
 
£nsSubTy≥
,

77 
uöt8_t
 
dSize
,

78 
uöt8_t
 
dF‹m©
,

79 
uöt8_t
 
timeF‹m©
,

80 
uöt8_t
 
tSize
,

81 
uöt8_t
 
hasMëaD©a


84 
îrCode
 = -
EPROTONOSUPPORT
;

85 
ÀngthP¨£d
;

86 
i
;

88 (
PSís‹Ty≥_t
)
£nsTy≥
) {

89 
PSENSOR_ACCELEROMETER_RAW
:

90 
PSENSOR_MAGNETIC_FIELD_RAW
:

91 
PSENSOR_GYROSCOPE_RAW
:

92 i‡((
£nsSubTy≥
 =
SENSOR_SUBTYPE_UNUSED
) &&

93 (
dSize
 =
DATA_SIZE_16_BIT
) &&

94 (
dF‹m©
 =
DATA_FORMAT_RAW
) &&

95 (
timeF‹m©
 =
TIME_FORMAT_RAW
)) {

97 
pOut
->
STy≥
 = (
ASís‹Ty≥_t
)
	`M_PSís‹ToAndroidBa£
(
£nsTy≥
);

98 
pOut
->
SubTy≥
 = 
SENSOR_SUBTYPE_UNUSED
;

99 
pOut
->
P
.
RawSís‹
.
Axis
[0] = 
	`BYTES_TO_SHORT
(

100 
pHif
->
SísPktRaw
.
D©aRaw
[0],

101 
pHif
->
SísPktRaw
.
D©aRaw
[1]);

102 
pOut
->
P
.
RawSís‹
.
Axis
[1] = 
	`BYTES_TO_SHORT
(

103 
pHif
->
SísPktRaw
.
D©aRaw
[2],

104 
pHif
->
SísPktRaw
.
D©aRaw
[3]);

105 
pOut
->
P
.
RawSís‹
.
Axis
[2] = 
	`BYTES_TO_SHORT
(

106 
pHif
->
SísPktRaw
.
D©aRaw
[4],

107 
pHif
->
SísPktRaw
.
D©aRaw
[5]);

110 
pOut
->
P
.
RawSís‹
.
TSèmp
.
TS64
 = 0;

111 
pOut
->
P
.
RawSís‹
.
TSèmp
.
TS8
[3] = 
pHif
->
SísPktRaw
.
TimeSèmp
[0];

112 
pOut
->
P
.
RawSís‹
.
TSèmp
.
TS8
[2] = 
pHif
->
SísPktRaw
.
TimeSèmp
[1];

113 
pOut
->
P
.
RawSís‹
.
TSèmp
.
TS8
[1] = 
pHif
->
SísPktRaw
.
TimeSèmp
[2];

114 
pOut
->
P
.
RawSís‹
.
TSèmp
.
TS8
[0] = 
pHif
->
SísPktRaw
.
TimeSèmp
[3];

116 
îrCode
 = 0;

117 
ÀngthP¨£d
 = 
SENSOR_RAW_DATA_PKT_SZ
;

120 
PSENSOR_ACCELEROMETER_UNCALIBRATED
:

121 i‡((
dSize
 =
DATA_SIZE_32_BIT
) &&

122 (
dF‹m©
 =
DATA_FORMAT_FIXPOINT
) &&

123 (
timeF‹m©
 =
TIME_FORMAT_FIXPOINT
) &&

124 (
tSize
 =
TIME_STAMP_64_BIT
)) {

126 
pOut
->
STy≥
 = (
ASís‹Ty≥_t
)
	`M_PSís‹ToAndroidBa£
(
£nsTy≥
);

127 
pOut
->
SubTy≥
 = 
SENSOR_SUBTYPE_UNUSED
;

128 
pOut
->
P
.
UnˇlFixP
.
Axis
[0] = 
	`BYTES_TO_LONG_ARR
(

129 
pHif
->
UnˇlPktFixP
.
D©a
,0);

130 
pOut
->
P
.
UnˇlFixP
.
Axis
[1] = 
	`BYTES_TO_LONG_ARR
(

131 
pHif
->
UnˇlPktFixP
.
D©a
, 4);

132 
pOut
->
P
.
UnˇlFixP
.
Axis
[2] = 
	`BYTES_TO_LONG_ARR
(

133 
pHif
->
UnˇlPktFixP
.
D©a
, 8);

136 i‡(
hasMëaD©a
) {

137 
pOut
->
P
.
UnˇlFixP
.
Off£t
[0] = 
	`BYTES_TO_LONG_ARR
(

138 
pHif
->
UnˇlPktFixP
.
Off£t
, 0);

139 
pOut
->
P
.
UnˇlFixP
.
Off£t
[1] = 
	`BYTES_TO_LONG_ARR
(

140 
pHif
->
UnˇlPktFixP
.
Off£t
, 4);

141 
pOut
->
P
.
UnˇlFixP
.
Off£t
[2] = 
	`BYTES_TO_LONG_ARR
(

142 
pHif
->
UnˇlPktFixP
.
Off£t
, 8);

144 
ÀngthP¨£d
 = 
UNCALIB_FIXP_DATA_OFFSET_PKT_SZ
;

146 
ÀngthP¨£d
 = 
UNCALIB_FIXP_DATA_PKT_SZ
;

148 
i
 = 0; i < (
uöt64_t
); i++) {

151 
pOut
->
P
.
UnˇlFixP
.
TimeSèmp
.
TS8
[
i
] = 
pHif
->
UnˇlPktFixP
.TimeSèmp[(
uöt64_t
)-i-1];

153 
îrCode
 = 0;

156 
SYSTEM_REAL_TIME_CLOCK
:

157 
	`¥ötk
("HY-DBG: %s:%òty≥ %i\n", 
__func__
, 
__LINE__
, 
£nsTy≥
);

160 
	`¥ötk
("HY-DBG: %s:%òty≥ %i\n", 
__func__
, 
__LINE__
, 
£nsTy≥
);

163 i‡(
îrCode
 == 0)

164  
ÀngthP¨£d
;

166  
îrCode
;

167 
	}
}

169 
	$OSP_P¨£Sís‹D©aPkt_Android
(

170 
Sís‹PackëTy≥s_t
 *
pOut
,

171 
Ho°IFPackës_t
 *
pHif
,

172 
ASís‹Ty≥_t
 
£nsTy≥
,

173 
uöt8_t
 
£nsSubTy≥
,

174 
uöt8_t
 
dSize
,

175 
uöt8_t
 
dF‹m©
,

176 
uöt8_t
 
timeF‹m©
,

177 
uöt8_t
 
tSize
,

178 
uöt8_t
 
hasMëaD©a


181 
îrCode
 = -
EPROTONOSUPPORT
;

182 
ÀngthP¨£d
;

183 
i
;

185 (
ASís‹Ty≥_t
)
£nsTy≥
) {

186 
SENSOR_ACCELEROMETER
:

187 
SENSOR_MAGNETIC_FIELD
:

188 
SENSOR_GYROSCOPE
:

189 
SENSOR_ORIENTATION
:

190 
SENSOR_LINEAR_ACCELERATION
:

191 
SENSOR_GRAVITY
:

192 i‡((
dSize
 =
DATA_SIZE_32_BIT
) &&

193 (
dF‹m©
 =
DATA_FORMAT_FIXPOINT
) &&

194 (
timeF‹m©
 =
TIME_FORMAT_FIXPOINT
) &&

195 (
tSize
 =
TIME_STAMP_64_BIT
)) {

197 
pOut
->
STy≥
 = (
ASís‹Ty≥_t
)
£nsTy≥
;

198 
pOut
->
SubTy≥
 = 
SENSOR_SUBTYPE_UNUSED
;

199 
pOut
->
P
.
CÆFixP
.
Axis
[0] =

200 
	`BYTES_TO_LONG_ARR
(
pHif
->
CÆPktFixP
.
D©a
, 0);

201 
pOut
->
P
.
CÆFixP
.
Axis
[1] =

202 
	`BYTES_TO_LONG_ARR
(
pHif
->
CÆPktFixP
.
D©a
, 4);

203 
pOut
->
P
.
CÆFixP
.
Axis
[2] =

204 
	`BYTES_TO_LONG_ARR
(
pHif
->
CÆPktFixP
.
D©a
, 8);

207 
i
 = 0; i < (
uöt64_t
); i++) {

212 
pOut
->
P
.
CÆFixP
.
TimeSèmp
.
TS8
[
i
] =

213 
pHif
->
CÆPktFixP
.
TimeSèmp
[(
uöt64_t
)-
i
-1];

215 
îrCode
 = 0;

216 
ÀngthP¨£d
 = 
CALIBRATED_FIXP_DATA_PKT_SZ
;

220 
SENSOR_GAME_ROTATION_VECTOR
:

221 
SENSOR_GEOMAGNETIC_ROTATION_VECTOR
:

222 
SENSOR_ROTATION_VECTOR
:

223 i‡((
dSize
 =
DATA_SIZE_32_BIT
) &&

224 (
dF‹m©
 =
DATA_FORMAT_FIXPOINT
) &&

225 (
timeF‹m©
 =
TIME_FORMAT_FIXPOINT
) &&

226 (
tSize
 =
TIME_STAMP_64_BIT
)) {

228 
pOut
->
STy≥
 = (
ASís‹Ty≥_t
)
£nsTy≥
;

229 
pOut
->
SubTy≥
 = 
SENSOR_SUBTYPE_UNUSED
;

230 
pOut
->
P
.
Qu©FixP
.
Qu©
[0] = 
	`BYTES_TO_LONG_ARR
(

231 
pHif
->
Qu©PktFixP
.
D©a
, 0);

232 
pOut
->
P
.
Qu©FixP
.
Qu©
[1] = 
	`BYTES_TO_LONG_ARR
(

233 
pHif
->
Qu©PktFixP
.
D©a
, 4);

234 
pOut
->
P
.
Qu©FixP
.
Qu©
[2] = 
	`BYTES_TO_LONG_ARR
(

235 
pHif
->
Qu©PktFixP
.
D©a
, 8);

236 
pOut
->
P
.
Qu©FixP
.
Qu©
[3] = 
	`BYTES_TO_LONG_ARR
(

237 
pHif
->
Qu©PktFixP
.
D©a
, 12);

240 
i
 = 0; i < (
uöt64_t
); i++) {

243 
pOut
->
P
.
Qu©FixP
.
TimeSèmp
.
TS8
[
i
] = 
pHif
->
Qu©PktFixP
.TimeSèmp[(
uöt64_t
)-i-1];

245 
îrCode
 = 0;

246 
ÀngthP¨£d
 = 
QUATERNION_FIXP_DATA_PKT_SZ
;

249 
SENSOR_SIGNIFICANT_MOTION
:

250 
	`¥ötk
("HY-DBG: %s:%i\n", 
__func__
, 
__LINE__
);

251 
SENSOR_MAGNETIC_FIELD_UNCALIBRATED
:

252 
SENSOR_GYROSCOPE_UNCALIBRATED
:

253 
SENSOR_PRESSURE
:

254 
SENSOR_STEP_DETECTOR
:

255 
SENSOR_STEP_COUNTER
:

256 i‡((
dSize
 =
DATA_SIZE_32_BIT
) &&

257 (
dF‹m©
 =
DATA_FORMAT_FIXPOINT
) &&

258 (
timeF‹m©
 =
TIME_FORMAT_FIXPOINT
) &&

259 (
tSize
 =
TIME_STAMP_64_BIT
)) {

261 
pOut
->
STy≥
 = (
ASís‹Ty≥_t
)
£nsTy≥
;

262 
pOut
->
SubTy≥
 = 
SENSOR_SUBTYPE_UNUSED
;

263 
pOut
->
P
.
UnˇlFixP
.
Axis
[0] = 
	`BYTES_TO_LONG_ARR
(

264 
pHif
->
UnˇlPktFixP
.
D©a
, 0);

265 
pOut
->
P
.
UnˇlFixP
.
Axis
[1] = 
	`BYTES_TO_LONG_ARR
(

266 
pHif
->
UnˇlPktFixP
.
D©a
, 4);

267 
pOut
->
P
.
UnˇlFixP
.
Axis
[2] = 
	`BYTES_TO_LONG_ARR
(

268 
pHif
->
UnˇlPktFixP
.
D©a
, 8);

271 i‡(
hasMëaD©a
) {

272 
pOut
->
P
.
UnˇlFixP
.
Off£t
[0] = 
	`BYTES_TO_LONG_ARR
(

273 
pHif
->
UnˇlPktFixP
.
Off£t
, 0);

274 
pOut
->
P
.
UnˇlFixP
.
Off£t
[1] = 
	`BYTES_TO_LONG_ARR
(

275 
pHif
->
UnˇlPktFixP
.
Off£t
, 4);

276 
pOut
->
P
.
UnˇlFixP
.
Off£t
[2] = 
	`BYTES_TO_LONG_ARR
(

277 
pHif
->
UnˇlPktFixP
.
Off£t
, 8);

279 
ÀngthP¨£d
 = 
UNCALIB_FIXP_DATA_OFFSET_PKT_SZ
;

281 
ÀngthP¨£d
 = 
UNCALIB_FIXP_DATA_PKT_SZ
;

283 
i
 = 0; i < (
uöt64_t
); i++) {

286 
pOut
->
P
.
UnˇlFixP
.
TimeSèmp
.
TS8
[
i
] =

287 
pHif
->
UnˇlPktFixP
.
TimeSèmp
[(
uöt64_t
)-
i
-1];

289 
îrCode
 = 0;

295 
i
;

296 *
p
;

297 
	`¥ötk
("HY-DBG: %s:%òty≥ %i: ", 
__func__
, 
__LINE__
, 
£nsTy≥
);

298 
p
 = (*)
pHif
;

299 
i
 = 0; i < 8; i++) {

300 
	`¥ötk
("%02x ", 
p
[
i
]);

302 
	`¥ötk
("\n");

307 i‡(
îrCode
 == 0)

308  
ÀngthP¨£d
;

310  
îrCode
;

311 
	}
}

312 
öt16_t
 
	$OSP_P¨£Sís‹D©aPkt
(
Sís‹PackëTy≥s_t
 *
pOut
,

313 
uöt8_t
 *
pPackë
, 
uöt16_t
 
pktSize
)

315 
Ho°IFPackës_t
 *
pHif
 = (Ho°IFPackës_t*)
pPackë
;

316 
îrCode
 = -
EPROTONOSUPPORT
;

317 
uöt8_t
 
£nsTy≥
;

318 
uöt8_t
 
£nsSubTy≥
, 
dSize
, 
dF‹m©
, 
timeF‹m©
,

319 
tSize
, 
isPriv©eTy≥
, 
hasMëaD©a
;

322 i‡((
pOut
 =
NULL
Ë|| (
pPackë
 == NULL))

323  (-
ENOMEM
);

326 
£nsTy≥
 = 
	`M_Sís‹Ty≥
(
pHif
->
SísPktRaw
.
Q
.
Sís‹IdByã
);

327 
£nsSubTy≥
 = 
	`M_P¨£Sís‹SubTy≥
(
pHif
->
SísPktRaw
.
Q
.
AâribuãByã
);

328 
isPriv©eTy≥
 = 
pHif
->
SísPktRaw
.
Q
.
C⁄åﬁByã
 &

329 
SENSOR_ANDROID_TYPE_MASK
;

330 
hasMëaD©a
 = 
	`M_P¨£Sís‹MëaD©a
 (
pHif
->
SísPktRaw
.
Q
.
Sís‹IdByã
);

331 
dSize
 = 
pHif
->
SísPktRaw
.
Q
.
AâribuãByã
 & 
DATA_SIZE_MASK
;

332 
dF‹m©
 = 
pHif
->
SísPktRaw
.
Q
.
C⁄åﬁByã
 & 
DATA_FORMAT_MASK
;

333 
timeF‹m©
 = 
pHif
->
SísPktRaw
.
Q
.
C⁄åﬁByã
 & 
TIME_FORMAT_MASK
;

334 
tSize
 = 
pHif
->
SísPktRaw
.
Q
.
AâribuãByã
 & 
TIME_STAMP_SIZE_MASK
;

337 i‡(!
isPriv©eTy≥
) {

339 
îrCode
 = 
	`OSP_P¨£Sís‹D©aPkt_Android
(
pOut
, 
pHif
,

340 (
ASís‹Ty≥_t
)
£nsTy≥
,

341 
£nsSubTy≥
, 
dSize
,

342 
dF‹m©
, 
timeF‹m©
, 
tSize
,

343 
hasMëaD©a
);

346 
îrCode
 = 
	`OSP_P¨£Sís‹D©aPkt_Priv©e
(
pOut
, 
pHif
,

347 (
ASís‹Ty≥_t
)
£nsTy≥
,

348 
£nsSubTy≥
, 
dSize
,

349 
dF‹m©
, 
timeF‹m©
, 
tSize
,

350 
hasMëaD©a
);

354  
îrCode
;

355 
	}
}

358 
	so•_d©a
 {

359 
i2c_˛õ¡
 *
	m˛õ¡
;

360 
öput_dev
 *
	möput_dev
;

361 
öput_pﬁÀd_dev
 *
	mpﬁl_dev
;

362 
öput_dev
 *
	mö_dev
[
NUM_ANDROID_SENSOR_TYPE
];

363 
öput_dev
 *
	mö_pdev
[
NUM_PRIVATE_SENSOR_TYPE
];

364 
timî_li°
 
	mo•_timî
;

365 
w‹k_°ru˘
 
	mo•_w‹k
;

368 
o•_d©a
 *
	ggOSP
;

370 
w‹k_queue
 *
	go•_w‹kq
;

372 
ssize_t
 
	$o•_gë_íabÀ
(
devi˚
 *
dev
, 
devi˚_©åibuã
 *
©å
, *
buf
)

375 
	}
}

377 
ssize_t
 
	$o•_£t_íabÀ
(
devi˚
 *
dev
, 
devi˚_©åibuã
 *
©å
,

378 c⁄° *
buf
, 
size_t
 
cou¡
)

380 
öput_dev
 *
öput
 = 
	`to_öput_dev
(
dev
);

381 
o•_d©a
 *
o•
 = 
	`öput_gë_drvd©a
(
öput
);

382 
i
;

383 
ªtvÆ
;

384 
v
;

386 i‡(
	`°ri˘_°πoul
(
buf
, 0, &
v
))

387  -
EINVAL
;

389 
i
 = 0; i < 
NUM_ANDROID_SENSOR_TYPE
; i++) {

390 i‡(
o•
->
ö_dev
[
i
] =
öput
) {

395 i‡(
i
 =
NUM_ANDROID_SENSOR_TYPE
)

396  -
EINVAL
;

398 
	`¥ötk
("HY-DBG: %s:%ò- o• %p\n", 
__func__
, 
__LINE__
, 
o•
);

399 i‡(
v
) {

400 
	`¥ötk
("HY-DBG: %s:%ò-É«blög %i\n", 
__func__
, 
__LINE__
, 
i
);

401 i‡(
i
 < 0x30) {

402 
ªtvÆ
 = 
	`i2c_smbus_ªad_byã_d©a
(
o•
->
˛õ¡
, 0x20+
i
);

405 
	`¥ötk
("HY-DBG: %s:%ò- dißblög %i\n", 
__func__
, 
__LINE__
, 
i
);

406 i‡(
i
 < 0x30) {

407 
ªtvÆ
 = 
	`i2c_smbus_ªad_byã_d©a
(
o•
->
˛õ¡
, 0x50+
i
);

411  
cou¡
;

412 
	}
}

414 
DEVICE_ATTR
(
íabÀ_√w
, 
S_IRUGO
|
S_IWUSR
, 
o•_gë_íabÀ
, 
o•_£t_íabÀ
);

416 
DEVICE_ATTR
(
íabÀ_√w
, 
S_IRUGO
|
S_IWUSR
|
S_IWUGO
, 
o•_gë_íabÀ
, 
o•_£t_íabÀ
);

419 
©åibuã
 *
	go•_©åibuãs
[] = {

420 &
dev_©å_íabÀ_√w
.
©å
,

421 
NULL


424 
©åibuã_group
 
	go•_©åibuã_group
 = {

425 .
©ås
 = 
o•_©åibuãs


428 
	$o•_i2c_ªad
(
o•_d©a
 *
o•
, 
u8
 
addr
, u8 *
d©a
, 
Àn
)

431 
i2c_msg
 
msgs
[] = {

433 .
addr
 = 
o•
->
˛õ¡
->addr,

434 .
Êags
 = 
o•
->
˛õ¡
->flags,

435 .
Àn
 = 1,

436 .
buf
 = &
addr
,

439 .
addr
 = 
o•
->
˛õ¡
->addr,

440 .
Êags
 = 
o•
->
˛õ¡
->Êag†| 
I2C_M_RD
,

441 .
Àn
 =Üen,

442 .
buf
 = 
d©a
,

446  
	`i2c_å™s„r
(
o•
->
˛õ¡
->
ad≠ãr
, 
msgs
, 2);

448 
i2c_msg
 
msgs
[3];

450 
msgs
[0].
addr
 = 
o•
->
˛õ¡
->addr;

451 
msgs
[0].
Êags
 = 
o•
->
˛õ¡
->flags;

452 
msgs
[0].
Àn
 = 1;

453 
msgs
[0].
buf
 = &
addr
;

455 i‡(
Àn
 > 4096) {

456 
msgs
[1].
addr
 = 
o•
->
˛õ¡
->addr;

457 
msgs
[1].
Êags
 = 
o•
->
˛õ¡
->Êag†| 
I2C_M_RD
;

458 
msgs
[1].
Àn
 =Üen;

459 
msgs
[1].
buf
 = 
d©a
;

461 
msgs
[2].
addr
 = 
o•
->
˛õ¡
->addr;

462 
msgs
[2].
Êags
 = 
o•
->
˛õ¡
->Êag†| 
I2C_M_RD
;

463 
msgs
[2].
Àn
 =Üen-4096;

464 
msgs
[2].
buf
 = 
d©a
+4096;

466  
	`i2c_å™s„r
(
o•
->
˛õ¡
->
ad≠ãr
, 
msgs
, 3);

468 
msgs
[1].
addr
 = 
o•
->
˛õ¡
->addr;

469 
msgs
[1].
Êags
 = 
o•
->
˛õ¡
->Êag†| 
I2C_M_RD
;

470 
msgs
[1].
Àn
 =Üen;

471 
msgs
[1].
buf
 = 
d©a
;

472  
	`i2c_å™s„r
(
o•
->
˛õ¡
->
ad≠ãr
, 
msgs
, 2);

476 
	}
}

478 
úqªtu∫_t
 
	$o•_i§
(
úq
, *
dev
)

480 
o•_d©a
 *
o•
 = 
dev
;

481 
îr
;

484 
	`o•_ªp‹t_ac˚Àøti⁄_d©a
(
tj9
);

486 
îr
 = 
	`i2c_smbus_ªad_byã_d©a
(
tj9
->
˛õ¡
, 
INT_REL
);

487 i‡(
îr
 < 0)

488 
	`dev_îr
(&
o•
->
˛õ¡
->
dev
,

489 "îr‹ cÀ¨ög i¡îru± sètus: %d\n", 
îr
);

491  
IRQ_HANDLED
;

492 
	}
}

494 
	$o•_íabÀ
(
o•_d©a
 *
o•
)

497 
	}
}

498 
	$o•_dißbÀ
(
o•_d©a
 *
o•
)

500 
	}
}

502 
	$o•_öput_›í
(
öput_dev
 *
öput
)

504 
o•_d©a
 *
o•
 = 
	`öput_gë_drvd©a
(
öput
);

506 
i
;

507 
ªtvÆ
;

509 
i
 = 0; i < 
NUM_ANDROID_SENSOR_TYPE
; i++) {

510 i‡(
o•
->
ö_dev
[
i
] =
öput
) {

514 
	`¥ötk
("HY-DBG: %s:%ò- closög %i\n", 
__func__
, 
__LINE__
, 
i
);

516 i‡(
i
 =
NUM_ANDROID_SENSOR_TYPE
)

518 i‡(
i
 < 0x30) {

519 
ªtvÆ
 = 
	`i2c_smbus_ªad_byã_d©a
(
o•
->
˛õ¡
, 0x20+
i
);

522  
	`o•_íabÀ
(
o•
);

523 
	}
}

525 
	$o•_öput_˛o£
(
öput_dev
 *
dev
)

527 
o•_d©a
 *
o•
 = 
	`öput_gë_drvd©a
(
dev
);

529 
i
;

530 
ªtvÆ
;

532 
i
 = 0; i < 
NUM_ANDROID_SENSOR_TYPE
; i++) {

533 i‡(
o•
->
ö_dev
[
i
] =
dev
) {

538 
	`¥ötk
("HY-DBG: %s:%ò- closög %i\n", 
__func__
, 
__LINE__
, 
i
);

540 i‡(
i
 =
NUM_ANDROID_SENSOR_TYPE
)

542 i‡(
i
 < 0x30) {

543 
ªtvÆ
 = 
	`i2c_smbus_ªad_byã_d©a
(
o•
->
˛õ¡
, 0x50+
i
);

546 
	`o•_dißbÀ
(
o•
);

547 
	}
}

549 
	$o•_öô_öput_devi˚
(
o•_d©a
 *
o•
,

550 
öput_dev
 *öput_dev, *
«me
)

552 
	`__£t_bô
(
EV_ABS
, 
öput_dev
->
evbô
);

553 
	`öput_£t_abs_∑øms
(
öput_dev
, 
ABS_X
, -
G_MAX
, G_MAX, 
FUZZ
, 
FLAT
);

554 
	`öput_£t_abs_∑øms
(
öput_dev
, 
ABS_Y
, -
G_MAX
, G_MAX, 
FUZZ
, 
FLAT
);

555 
	`öput_£t_abs_∑øms
(
öput_dev
, 
ABS_Z
, -
G_MAX
, G_MAX, 
FUZZ
, 
FLAT
);

556 
	`öput_£t_abs_∑øms
(
öput_dev
, 
ABS_THROTTLE
, -
G_MAX
, G_MAX, 
FUZZ
, 
FLAT
);

557 
	`öput_£t_abs_∑øms
(
öput_dev
, 
ABS_GAS
, -
G_MAX
, G_MAX, 
FUZZ
, 
FLAT
);

559 
öput_dev
->
«me
 =Çame;

560 
öput_dev
->
id
.
bu°y≥
 = 
BUS_I2C
;

561 
öput_dev
->
dev
.
∑ª¡
 = &
o•
->
˛õ¡
->dev;

562 
öput_dev
->
ªlbô
[0] |
	`BIT_MASK
(
REL_X
);

563 
	}
}

565 
	$o•_£tup_Ÿhî_öput
(
o•_d©a
 *
o•
)

567 
i
 = 0, 
j
 = 0;

568 
öput_dev
 *input_dev;

569 
îr
;

571 
i
 = 2; i < 
NUM_ANDROID_SENSOR_TYPE
; i++) {

572 
o•
->
ö_dev
[
i
] = 
NULL
;

574 
i
 = 0; i < 
NUM_PRIVATE_SENSOR_TYPE
; i++) {

575 
o•
->
ö_pdev
[
i
] = 
NULL
;

578 
i
 = 2; i < 
NUM_ANDROID_SENSOR_TYPE
; i++) {

579 i‡(
ö_«me
[
i
] =
NULL
)

581 
öput_dev
 = 
	`öput_Æloˇã_devi˚
();

582 i‡(!
öput_dev
) {

583 
	`dev_îr
(&
o•
->
˛õ¡
->
dev
, "input deviceállocate failed\n");

584 
îr
 = -
ENOMEM
;

585 
îr_öput_Æloc
;

587 
o•
->
ö_dev
[
i
] = 
öput_dev
;

588 
öput_dev
->
›í
 = 
o•_öput_›í
;

589 
öput_dev
->
˛o£
 = 
o•_öput_˛o£
;

590 
	`öput_£t_drvd©a
(
öput_dev
, 
o•
);

591 
	`o•_öô_öput_devi˚
(
o•
, 
öput_dev
, 
ö_«me
[
i
]);

594 
j
 = 0; j < 
NUM_PRIVATE_SENSOR_TYPE
; j++) {

595 i‡(
ö_≤ame
[
j
] =
NULL
)

597 
öput_dev
 = 
	`öput_Æloˇã_devi˚
();

598 i‡(!
öput_dev
) {

599 
	`dev_îr
(&
o•
->
˛õ¡
->
dev
, "input deviceállocate failed\n");

600 
îr
 = -
ENOMEM
;

601 
îr_öput_Æloc
;

603 
o•
->
ö_pdev
[
j
] = 
öput_dev
;

604 
öput_dev
->
›í
 = 
o•_öput_›í
;

605 
öput_dev
->
˛o£
 = 
o•_öput_˛o£
;

606 
	`öput_£t_drvd©a
(
öput_dev
, 
o•
);

607 
	`o•_öô_öput_devi˚
(
o•
, 
öput_dev
, 
ö_≤ame
[
j
]);

610 
i
 = 2; i < 
NUM_ANDROID_SENSOR_TYPE
; i++) {

611 i‡(
ö_«me
[
i
] =
NULL
)

613 
îr
 = 
	`öput_ªgi°î_devi˚
(
o•
->
ö_dev
[
i
]);

614 i‡(
îr
) {

615 
	`dev_îr
(&
o•
->
˛õ¡
->
dev
,

617 
o•
->
ö_dev
[
i
]->
«me
, 
îr
);

618 
îr_öput_ªg
;

620 
îr
 = 
	`sysfs_¸óã_group
(&
o•
->
ö_dev
[
i
]->
dev
.
kobj
, &
o•_©åibuã_group
);

621 i‡(
îr
) {

622 
	`¥ötk
("HY-DBG: %s:%ò-Éº = %i\n", 
__func__
, 
__LINE__
, 
îr
);

625 
j
 = 0; j < 
NUM_PRIVATE_SENSOR_TYPE
; j++) {

626 i‡(
ö_≤ame
[
j
] =
NULL
)

628 
îr
 = 
	`öput_ªgi°î_devi˚
(
o•
->
ö_pdev
[
j
]);

629 i‡(
îr
) {

630 
	`dev_îr
(&
o•
->
˛õ¡
->
dev
,

632 
o•
->
ö_pdev
[
j
]->
«me
, 
îr
);

633 
îr_öput_ªg
;

638 
îr_öput_ªg
:

639 
i
--;

640 ; 
i
 > 1; i--) {

641 i‡(
ö_«me
[
i
] =
NULL
)

643 
	`öput_uƒegi°î_devi˚
(
o•
->
ö_dev
[
i
]);

645 i‡(
j
 != 0) {

646 
j
--;

647 ; 
j
 > 1; j--) {

648 i‡(
ö_≤ame
[
j
] =
NULL
)

650 
	`öput_uƒegi°î_devi˚
(
o•
->
ö_dev
[
j
]);

654 
îr_öput_Æloc
:

655 
i
 = 2; i < 
NUM_ANDROID_SENSOR_TYPE
; i++) {

656 i‡(
ö_«me
[
i
] =
NULL
)

658 i‡(
o•
->
ö_dev
)

659 
	`öput_‰ì_devi˚
(
o•
->
ö_dev
[
i
]);

661 
j
 = 0; j < 
NUM_PRIVATE_SENSOR_TYPE
; j++) {

662 i‡(
ö_«me
[
j
] =
NULL
)

664 i‡(
o•
->
ö_dev
)

665 
	`öput_‰ì_devi˚
(
o•
->
ö_pdev
[
j
]);

668  
îr
;

669 
	}
}

670 
	$o•_£tup_öput_devi˚
(
o•_d©a
 *
o•
)

672 
öput_dev
 *input_dev;

673 
îr
;

675 
öput_dev
 = 
	`öput_Æloˇã_devi˚
();

676 i‡(!
öput_dev
) {

677 
	`dev_îr
(&
o•
->
˛õ¡
->
dev
, "input deviceállocate failed\n");

678  -
ENOMEM
;

681 
o•
->
öput_dev
 = input_dev;

682 
o•
->
ö_dev
[1] = 
öput_dev
;

684 
öput_dev
->
›í
 = 
o•_öput_›í
;

685 
öput_dev
->
˛o£
 = 
o•_öput_˛o£
;

686 
	`öput_£t_drvd©a
(
öput_dev
, 
o•
);

688 
	`o•_öô_öput_devi˚
(
o•
, 
öput_dev
, 
ö_«me
[1]);

690 
îr
 = 
	`öput_ªgi°î_devi˚
(
o•
->
öput_dev
);

691 i‡(
îr
) {

692 
	`dev_îr
(&
o•
->
˛õ¡
->
dev
,

694 
o•
->
öput_dev
->
«me
, 
îr
);

695 
	`öput_‰ì_devi˚
(
o•
->
öput_dev
);

696  
îr
;

698 
îr
 = 
	`sysfs_¸óã_group
(&
o•
->
ö_dev
[1]->
dev
.
kobj
, &
o•_©åibuã_group
);

699 i‡(
îr
) {

700 
	`¥ötk
("HY-DBG: %s:%ò-Éº = %i\n", 
__func__
, 
__LINE__
, 
îr
);

703 
	`o•_£tup_Ÿhî_öput
(
o•
);

705 
	}
}

707 
	$OSP_Rï‹tSís‹
(
o•_d©a
 *
o•
,

708 
Sís‹PackëTy≥s_t
 *
•ack
)

710 
PSís‹
;

711 
cou¡î
 = 0;

714 
•ack
->
STy≥
) {

715 
SENSOR_STEP_DETECTOR
:

716 
SENSOR_SIGNIFICANT_MOTION
:

717 
	`¥ötk
("HY-DBG:%s:%i(%iË%∞%ò%ò%i\n", 
__func__
,
__LINE__
, 
•ack
->
STy≥
, 
o•
->
ö_dev
[•ack->STy≥], s∑ck->
P
.
UnˇlFixP
.
Axis
[0], spack->P.UncalFixP.Axis[1], spack->P.UncalFixP.Axis[2]);

719 i‡(!
o•
->
ö_dev
[
•ack
->
STy≥
]) ;

720 
	`öput_ªp‹t_abs
(
o•
->
ö_dev
[
•ack
->
STy≥
], 
ABS_X
, 1);

721 
	`öput_ªp‹t_abs
(
o•
->
ö_dev
[
•ack
->
STy≥
], 
ABS_GAS
, 
cou¡î
);

722 
cou¡î
++;

723 
	`öput_sync
(
o•
->
ö_dev
[
•ack
->
STy≥
]);

725 
SENSOR_STEP_COUNTER
:

726 
SENSOR_PRESSURE
:

727 
	`¥ötk
("HY-DBG:%s:%i(%iË%∞%ò%ò%i\n", 
__func__
,
__LINE__
, 
•ack
->
STy≥
, 
o•
->
ö_dev
[•ack->STy≥], s∑ck->
P
.
UnˇlFixP
.
Axis
[0], spack->P.UncalFixP.Axis[1], spack->P.UncalFixP.Axis[2]);

729 
SENSOR_MAGNETIC_FIELD_UNCALIBRATED
:

730 
SENSOR_GYROSCOPE_UNCALIBRATED
:

731 i‡(!
o•
->
ö_dev
[
•ack
->
STy≥
]) ;

732 
	`öput_ªp‹t_abs
(
o•
->
ö_dev
[
•ack
->
STy≥
], 
ABS_X
, s∑ck->
P
.
UnˇlFixP
.
Axis
[0]);

733 
	`öput_ªp‹t_abs
(
o•
->
ö_dev
[
•ack
->
STy≥
], 
ABS_Y
, s∑ck->
P
.
UnˇlFixP
.
Axis
[1]);

734 
	`öput_ªp‹t_abs
(
o•
->
ö_dev
[
•ack
->
STy≥
], 
ABS_Z
, s∑ck->
P
.
UnˇlFixP
.
Axis
[2]);

735 
	`öput_sync
(
o•
->
ö_dev
[
•ack
->
STy≥
]);

737 
SENSOR_ACCELEROMETER
:

738 
SENSOR_MAGNETIC_FIELD
:

739 
SENSOR_GYROSCOPE
:

740 
SENSOR_ORIENTATION
:

742 i‡(!
o•
->
ö_dev
[
•ack
->
STy≥
]) ;

743 
	`öput_ªp‹t_abs
(
o•
->
ö_dev
[
•ack
->
STy≥
], 
ABS_X
, s∑ck->
P
.
CÆFixP
.
Axis
[0]);

744 
	`öput_ªp‹t_abs
(
o•
->
ö_dev
[
•ack
->
STy≥
], 
ABS_Y
, s∑ck->
P
.
CÆFixP
.
Axis
[1]);

745 
	`öput_ªp‹t_abs
(
o•
->
ö_dev
[
•ack
->
STy≥
], 
ABS_Z
, s∑ck->
P
.
CÆFixP
.
Axis
[2]);

746 
	`öput_sync
(
o•
->
ö_dev
[
•ack
->
STy≥
]);

748 
SENSOR_ROTATION_VECTOR
:

749 
SENSOR_GEOMAGNETIC_ROTATION_VECTOR
:

750 
SENSOR_GAME_ROTATION_VECTOR
:

752 i‡(!
o•
->
ö_dev
[
•ack
->
STy≥
]) ;

753 
	`öput_ªp‹t_abs
(
o•
->
ö_dev
[
•ack
->
STy≥
], 
ABS_GAS
, s∑ck->
P
.
Qu©FixP
.
Qu©
[0]);

754 
	`öput_ªp‹t_abs
(
o•
->
ö_dev
[
•ack
->
STy≥
], 
ABS_X
, s∑ck->
P
.
Qu©FixP
.
Qu©
[1]);

755 
	`öput_ªp‹t_abs
(
o•
->
ö_dev
[
•ack
->
STy≥
], 
ABS_Y
, s∑ck->
P
.
Qu©FixP
.
Qu©
[2]);

756 
	`öput_ªp‹t_abs
(
o•
->
ö_dev
[
•ack
->
STy≥
], 
ABS_Z
, s∑ck->
P
.
Qu©FixP
.
Qu©
[3]);

757 
	`öput_sync
(
o•
->
ö_dev
[
•ack
->
STy≥
]);

759 
PSENSOR_ACCELEROMETER_UNCALIBRATED
|
SENSOR_DEVICE_PRIVATE_BASE
:

760 
PSís‹
 = 
•ack
->
STy≥
 & ~(
SENSOR_DEVICE_PRIVATE_BASE
);

762 i‡(!
o•
->
ö_pdev
[
PSís‹
]) ;

763 
	`öput_ªp‹t_abs
(
o•
->
ö_pdev
[
PSís‹
], 
ABS_X
, 
•ack
->
P
.
UnˇlFixP
.
Axis
[0]);

764 
	`öput_ªp‹t_abs
(
o•
->
ö_pdev
[
PSís‹
], 
ABS_Y
, 
•ack
->
P
.
UnˇlFixP
.
Axis
[1]);

765 
	`öput_ªp‹t_abs
(
o•
->
ö_pdev
[
PSís‹
], 
ABS_Z
, 
•ack
->
P
.
UnˇlFixP
.
Axis
[2]);

766 
	`öput_sync
(
o•
->
ö_pdev
[
PSís‹
]);

768 
PSENSOR_ACCELEROMETER_RAW
|
SENSOR_DEVICE_PRIVATE_BASE
:

769 
PSís‹
 = 
•ack
->
STy≥
 & ~(
SENSOR_DEVICE_PRIVATE_BASE
);

771 i‡(!
o•
->
ö_pdev
[
PSís‹
]) ;

772 
	`öput_ªp‹t_abs
(
o•
->
ö_pdev
[
PSís‹
], 
ABS_X
, 
•ack
->
P
.
RawSís‹
.
Axis
[0]);

773 
	`öput_ªp‹t_abs
(
o•
->
ö_pdev
[
PSís‹
], 
ABS_Y
, 
•ack
->
P
.
RawSís‹
.
Axis
[1]);

774 
	`öput_ªp‹t_abs
(
o•
->
ö_pdev
[
PSís‹
], 
ABS_Z
, 
•ack
->
P
.
RawSís‹
.
Axis
[2]);

775 
	`öput_sync
(
o•
->
ö_pdev
[
PSís‹
]);

781 
	}
}

783 *
	go•_∑ck
;

784 *
	go•_∑ck2
;

786 
	$o•_w‹k_q
(
w‹k_°ru˘
 *
w‹k
)

788 
o•_d©a
 *
o•
 = 
	`c⁄èöî_of
(
w‹k
, o•_d©a, 
o•_w‹k
);

789 
uöt16_t
 
∂í
 = 0, 
∂í_ﬁd
 = 0;

790 
uöt16_t
 
∂í2
 = 0, 
∂í2_ﬁd
 = 0;

791 *
∑ck_±r
;

792 
∑ck_cou¡
;

793 
Sís‹PackëTy≥s_t
 
•ack
;

794 
îr
;

795 
ªt
;

796 
uöt32_t
 
öéí
;

797 
gŸ∑ck1
 = 0;

798 
gŸ∑ck2
 = 0;

800 
ªt
 = 
	`o•_i2c_ªad
(
o•
, 
OSP_INT_LEN
, (*)&
öéí
, 4);

801 i‡((
ªt
 >0Ë&& (
öéí
&
OSP_INT_DRDY
)) {

802 
∂í
 = (
öéí
 >> 4);

803 
∂í_ﬁd
 = 
∂í
;

804 i‡(
∂í
>0 &&Ölen < 8192) {

805 
ªt
 = 
	`o•_i2c_ªad
(
o•
, 
OSP_DATA_OUT
, 
o•_∑ck
, 
∂í
);

806 i‡(
ªt
 < 0) ;

807 
gŸ∑ck1
 = 1;

811 
ªt
 = 
	`o•_i2c_ªad
(
o•
, 
OSP_INT_LEN
, (*)&
öéí
, 4);

812 i‡((
ªt
 >0Ë&& (
öéí
&
OSP_INT_DRDY
)) {

813 
∂í2
 = (
öéí
 >> 4);

814 
∂í2_ﬁd
 = 
∂í2
;

815 i‡(
∂í2
>0 &&Ölen2 < 8192) {

816 
ªt
 = 
	`o•_i2c_ªad
(
o•
, 
OSP_DATA_OUT
, 
o•_∑ck2
, 
∂í2
);

817 i‡(
ªt
 >= 0)

818 
gŸ∑ck2
 = 1;

822 i‡(
gŸ∑ck1
) {

823 
∑ck_cou¡
 = 0;

824 
∑ck_±r
 = 
o•_∑ck
;

826 
îr
 = 
	`OSP_P¨£Sís‹D©aPkt
(&
•ack
, 
∑ck_±r
, 
∂í
);

827 i‡(
îr
>0) {

828 
	`OSP_Rï‹tSís‹
(
o•
, &
•ack
);

830 
	`¥ötk
("OSPÖackëÖ¨sögÉº‹ = %i,Öack_cou¡ = %ò∂í = %i,ÖÀn_ﬁd = %i\n", 
îr
, 
∑ck_cou¡
, 
∂í
, 
∂í_ﬁd
);

833 
∂í
 -
îr
;

834 
∑ck_±r
 +
îr
;

835 
∑ck_cou¡
++;

836 } 
∂í
 > 0 && 
∂í2
 < 8192);

838 i‡(
gŸ∑ck2
) {

839 
∑ck_cou¡
 = 0;

840 
∑ck_±r
 = 
o•_∑ck2
;

842 
îr
 = 
	`OSP_P¨£Sís‹D©aPkt
(&
•ack
, 
∑ck_±r
, 
∂í2
);

843 i‡(
îr
>0) {

844 
	`OSP_Rï‹tSís‹
(
o•
, &
•ack
);

846 
	`¥ötk
("OSPÖackëÖ¨sögÉº‹ = %i,Öack_cou¡ = %ò∂í2 = %i,ÖÀn2_ﬁd = %i\n", 
îr
, 
∑ck_cou¡
, 
∂í2
, 
∂í2_ﬁd
);

849 
∂í2
 -
îr
;

850 
∑ck_±r
 +
îr
;

851 
∑ck_cou¡
++;

852 } 
∂í2
 > 0 &&Ölen2 < 8192);

855 
	}
}

856 
	$o•_pﬁl_timî
(
_o•
)

858 
o•_d©a
 *
o•
 = (*)
_o•
;

859 
	`queue_w‹k
(
o•_w‹kq
, &
o•
->
o•_w‹k
);

861 
	`mod_timî
(&
o•
->
o•_timî
, 
jiffõs
+
	`m£cs_to_jiffõs
(20));

863 
	`mod_timî
(&
o•
->
o•_timî
, 
jiffõs
+1);

865 
	}
}

867 
úqªtu∫_t
 
	$o•_úq_thªad
(
úq
, *
dev
)

869 
o•_d©a
 *
o•
 = 
dev
;

871 
	`queue_w‹k
(
o•_w‹kq
, &
o•
->
o•_w‹k
);

873  
IRQ_HANDLED
;

874 
	}
}

876 
	$o•_pﬁl
(
öput_pﬁÀd_dev
 *
dev
)

879 
o•_d©a
 *
o•
 = 
dev
->
¥iv©e
;

880 
ªtvÆ
;

881 
maxcou¡
 = 0x1ff;

882 
uöt16_t
 
∂í
, 
∂í_ﬁd
;

883 *
∑ck_±r
;

884 
∑ck_cou¡
;

885 
Sís‹PackëTy≥s_t
 
•ack
;

886 
îr
;

889 
ªtvÆ
 = 
	`i2c_smbus_ªad_byã_d©a
(
o•
->
˛õ¡
, 
OSP_INT_REASON
);

890 i‡(
ªtvÆ
&
OSP_INT_DRDY
) {

891 
	`o•_i2c_ªad
(
o•
, 
OSP_DATA_LEN_L
, (*)&
∂í
, 2);

892 
∑ck_cou¡
 = 0;

893 i‡(
∂í
>0 &&Ölen < 8192) {

894 
∑ck_±r
 = 
o•_∑ck
;

895 
ªtvÆ
 = 
	`o•_i2c_ªad
(
o•
, 
OSP_DATA_OUT
, 
o•_∑ck
, 
∂í
);

896 
∂í_ﬁd
 = 
∂í
;

898 
îr
 = 
	`OSP_P¨£Sís‹D©aPkt
(&
•ack
, 
∑ck_±r
, 
∂í
);

899 i‡(
îr
>=0) {

900 
	`OSP_Rï‹tSís‹
(
o•
, &
•ack
);

902 
	`¥ötk
("%s:%i: OSPÖackëÖ¨sögÉº‹ = %i,Öack_cou¡ = %ò∂í = %i,ÖÀn_ﬁd = %i\n", 
__func__
, 
__LINE__
, 
îr
, 
∑ck_cou¡
, 
∂í
, 
∂í_ﬁd
);

905 
∂í
 -
îr
;

906 
∑ck_±r
 +
îr
;

907 
∑ck_cou¡
++;

908 } 
∂í
 > 0);

913 
maxcou¡
--;

914 } 
maxcou¡
);

915 i‡(
maxcou¡
 < 0x3f) {

916 
	`¥ötk
("WARNING - Maxcou¡ = %i\n", 
maxcou¡
);

917 i‡(!
maxcou¡
)

918 
	`¥ötk
("Toÿbusy i¿pﬁl, maxcou¡ = %i\n", 
maxcou¡
);

921 
	}
}

922 
	$o•_pﬁÀd_öput_›í
(
öput_pﬁÀd_dev
 *
dev
)

924 
o•_d©a
 *
o•
 = 
dev
->
¥iv©e
;

926 
	`o•_íabÀ
(
o•
);

927 
	}
}

929 
	$o•_pﬁÀd_öput_˛o£
(
öput_pﬁÀd_dev
 *
dev
)

931 
o•_d©a
 *
o•
 = 
dev
->
¥iv©e
;

933 
	`o•_dißbÀ
(
o•
);

934 
	}
}

937 
	$o•_£tup_pﬁÀd_devi˚
(
o•_d©a
 *
o•
)

939 
îr
;

940 
öput_pﬁÀd_dev
 *
pﬁl_dev
;

941 
pﬁl_dev
 = 
	`öput_Æloˇã_pﬁÀd_devi˚
();

943 
	`¥ötk
("HY-DBG: %s:%i\n", 
__func__
, 
__LINE__
);

944 i‡(!
pﬁl_dev
) {

945 
	`dev_îr
(&
o•
->
˛õ¡
->
dev
,

947  -
ENOMEM
;

950 
o•
->
pﬁl_dev
 =Öoll_dev;

951 
o•
->
öput_dev
 = 
pﬁl_dev
->
öput
;

953 
pﬁl_dev
->
¥iv©e
 = 
o•
;

954 
pﬁl_dev
->
pﬁl
 = 
o•_pﬁl
;

955 
pﬁl_dev
->
›í
 = 
o•_pﬁÀd_öput_›í
;

956 
pﬁl_dev
->
˛o£
 = 
o•_pﬁÀd_öput_˛o£
;

958 
pﬁl_dev
->
pﬁl_öãrvÆ
 = 20;

960 
pﬁl_dev
->
pﬁl_öãrvÆ
 = 0;

963 
	`¥ötk
("HY-DBG: %s:%i\n", 
__func__
, 
__LINE__
);

964 
	`o•_öô_öput_devi˚
(
o•
, 
pﬁl_dev
->
öput
, 
ö_«me
[1]);

965 
	`¥ötk
("HY-DBG: %s:%i\n", 
__func__
, 
__LINE__
);

967 
o•
->
ö_dev
[1] = 
pﬁl_dev
->
öput
;

968 
îr
 = 
	`öput_ªgi°î_pﬁÀd_devi˚
(
pﬁl_dev
);

969 i‡(
îr
) {

970 
	`dev_îr
(&
o•
->
˛õ¡
->
dev
,

971 "U«bÀÅÿªgi°îÖﬁÀd devi˚,Éº=%d\n", 
îr
);

972 
	`öput_‰ì_pﬁÀd_devi˚
(
pﬁl_dev
);

973  
îr
;

976 
	`o•_£tup_Ÿhî_öput
(
o•
);

977 
	`¥ötk
("HY-DBG: %s:%i\n", 
__func__
, 
__LINE__
);

980 
	}
}

982 
	$o•_ã¨down_pﬁÀd_devi˚
(
o•_d©a
 *
o•
)

985 
	`öput_uƒegi°î_pﬁÀd_devi˚
(
o•
->
pﬁl_dev
);

986 
	`öput_‰ì_pﬁÀd_devi˚
(
o•
->
pﬁl_dev
);

987 
	}
}

989 
	$o•_vîify
(
o•_d©a
 *
o•
)

991 
ªtvÆ
;

993 
ªtvÆ
 = 
	`i2c_smbus_ªad_byã_d©a
(
o•
->
˛õ¡
, 
OSP_WHOAMI
);

994 i‡(
ªtvÆ
 < 0) {

995 
	`dev_îr
(&
o•
->
˛õ¡
->
dev
, "ªadÉº i¡ sour˚, 0x%x\n", 
ªtvÆ
);

996 
out
;

999 
ªtvÆ
 = (ªtvÆ !0x54Ë? -
EIO
 : 0;

1001 
ªtvÆ
 = 
	`i2c_smbus_ªad_byã_d©a
(
o•
->
˛õ¡
, 
OSP_CONFIG
);

1003 
out
:

1004  
ªtvÆ
;

1005 
	}
}

1006 
	$o•_¥obe
(
i2c_˛õ¡
 *
˛õ¡
,

1007 c⁄° 
i2c_devi˚_id
 *
id
)

1009 
o•_d©a
 *
o•
;

1010 
îr
;

1012 i‡(!
	`i2c_check_fun˘i⁄Æôy
(
˛õ¡
->
ad≠ãr
,

1013 
I2C_FUNC_I2C
 | 
I2C_FUNC_SMBUS_BYTE_DATA
)) {

1014 
	`dev_îr
(&
˛õ¡
->
dev
, "client isÇot i2c capable\n");

1015  -
ENXIO
;

1018 
o•
 = 
	`kzÆloc
((*o•), 
GFP_KERNEL
);

1019 i‡(!
o•
) {

1020 
	`dev_îr
(&
˛õ¡
->
dev
,

1022  -
ENOMEM
;

1024 
gOSP
 = 
o•
;

1025 
o•_∑ck
 = 
	`kzÆloc
(8192, 
GFP_KERNEL
);

1026 i‡(!
o•_∑ck
) {

1027 
	`dev_îr
(&
˛õ¡
->
dev
,

1029  -
ENOMEM
;

1031 
o•_∑ck2
 = 
	`kzÆloc
(8192, 
GFP_KERNEL
);

1032 i‡(!
o•_∑ck2
) {

1033 
	`dev_îr
(&
˛õ¡
->
dev
,

1035  -
ENOMEM
;

1038 
o•
->
˛õ¡
 = client;

1040 
îr
 = 
	`o•_vîify
(
o•
);

1041 i‡(
îr
 < 0) {

1042 
	`dev_îr
(&
˛õ¡
->
dev
, "deviceÇotÑecognized\n");

1043 
îr_‰ì_mem
;

1046 
	`i2c_£t_˛õ¡d©a
(
˛õ¡
, 
o•
);

1048 
o•_w‹kq
 = 
	`¸óã_w‹kqueue
("osp_queue");

1049 i‡(
o•_w‹kq
) {

1050 
	`INIT_WORK
(&
o•
->
o•_w‹k
, 
o•_w‹k_q
);

1054 
	`o•_£tup_pﬁÀd_devi˚
(
o•
);

1056 
	`o•_£tup_öput_devi˚
(
o•
);

1059 
˛õ¡
->
úq
 = -1;

1061 i‡(
˛õ¡
->
úq
 > 0) {

1062 
îr
 = 
	`ªque°_thªaded_úq
(
˛õ¡
->
úq
, 
NULL
, 
o•_úq_thªad
, 
IRQF_TRIGGER_LOW
, "o•-sh", 
o•
);

1063 i‡(
îr
 < 0) {

1064 
	`dev_îr
(&
˛õ¡
->
dev
,

1066 
˛õ¡
->
úq
, 
îr
);

1070 
îr
 = -
EINVAL
;

1072 
	`£tup_timî
(&
o•
->
o•_timî
, 
o•_pﬁl_timî
, ()osp);

1074 i‡(
îr
 < 0) {

1075 
	`mod_timî
(&
o•
->
o•_timî
, 
jiffõs
 + 
	`m£cs_to_jiffõs
(10));

1080 
îr_‰ì_úq
:

1081 
	`‰ì_úq
(
˛õ¡
->
úq
, 
o•
);

1082 
îr_de°roy_öput
:

1083 
	`öput_uƒegi°î_devi˚
(
o•
->
öput_dev
);

1086 
îr_pd©a_exô
:

1087 i‡(
tj9
->
pd©a
.
exô
)

1088 
tj9
->
pd©a
.
	`exô
();

1090 
îr_‰ì_mem
:

1091 
	`k‰ì
(
o•
);

1092  
îr
;

1093 
	}
}

1095 
	$o•_ªmove
(
i2c_˛õ¡
 *
˛õ¡
)

1097 
o•_d©a
 *
o•
 = 
	`i2c_gë_˛õ¡d©a
(
˛õ¡
);

1099 i‡(
˛õ¡
->
úq
) {

1101 
	`sysfs_ªmove_group
(&
˛õ¡
->
dev
.
kobj
, &
kxtj9_©åibuã_group
);

1103 
	`‰ì_úq
(
˛õ¡
->
úq
, 
o•
);

1104 
	`öput_uƒegi°î_devi˚
(
o•
->
öput_dev
);

1106 
	`o•_ã¨down_pﬁÀd_devi˚
(
o•
);

1109 
	`k‰ì
(
o•
);

1112 
	}
}

1114 #ifde‡
CONFIG_PM_SLEEP


1115 
	$o•_su•íd
(
devi˚
 *
dev
)

1117 
i2c_˛õ¡
 *
˛õ¡
 = 
	`to_i2c_˛õ¡
(
dev
);

1118 
o•_d©a
 *
o•
 = 
	`i2c_gë_˛õ¡d©a
(
˛õ¡
);

1119 
öput_dev
 *öput_dev = 
o•
->input_dev;

1121 
	`muãx_lock
(&
öput_dev
->
muãx
);

1123 i‡(
öput_dev
->
u£rs
)

1124 
	`o•_dißbÀ
(
o•
);

1126 
	`muãx_u∆ock
(&
öput_dev
->
muãx
);

1128 
	}
}

1130 
	$o•_ªsume
(
devi˚
 *
dev
)

1132 
i2c_˛õ¡
 *
˛õ¡
 = 
	`to_i2c_˛õ¡
(
dev
);

1133 
o•_d©a
 *
o•
 = 
	`i2c_gë_˛õ¡d©a
(
˛õ¡
);

1134 
öput_dev
 *öput_dev = 
o•
->input_dev;

1135 
ªtvÆ
 = 0;

1137 
	`muãx_lock
(&
öput_dev
->
muãx
);

1139 i‡(
öput_dev
->
u£rs
)

1140 
	`o•_íabÀ
(
o•
);

1142 
	`muãx_u∆ock
(&
öput_dev
->
muãx
);

1143  
ªtvÆ
;

1144 
	}
}

1147 
SIMPLE_DEV_PM_OPS
(
o•_pm_›s
, 
o•_su•íd
, 
o•_ªsume
);

1149 c⁄° 
i2c_devi˚_id
 
	go•_id
[] = {

1150 { 
NAME
, 0 },

1154 
MODULE_DEVICE_TABLE
(
i2c
, 
o•_id
);

1156 
i2c_drivî
 
	go•_drivî
 = {

1157 .
drivî
 = {

1158 .
«me
 = 
NAME
,

1159 .
	gow√r
 = 
THIS_MODULE
,

1160 .
	gpm
 = &
o•_pm_›s
,

1162 .
	g¥obe
 = 
o•_¥obe
,

1163 .
	gªmove
 = 
o•_ªmove
,

1164 .
	gid_èbÀ
 = 
o•_id
,

1167 
moduÀ_i2c_drivî
(
o•_drivî
);

1169 
__öô
 
	$o•_öô
()

1171  
	`i2c_add_drivî
(&
o•_drivî
);

1172 
	}
}

1173 
moduÀ_öô
(
o•_öô
);

1178 
MODULE_DESCRIPTION
("OSP driver");

1179 
MODULE_AUTHOR
("Hunyue Yau <hy@hy-research.com>");

1180 
MODULE_LICENSE
("GPL");

	@osp_i2c_map.h

1 #i‚de‡
OSP_NIOBE_H


2 
	#OSP_NIOBE_H


	)

7 
	#OSP_WHOAMI
 0x00

	)

8 
	#OSP_VERSION0
 0x01

	)

9 
	#OSP_VERSION1
 0x02

	)

10 
	#OSP_INT_REASON
 0x03

	)

11 
	#OSP_INT_NONE
 0x00

	)

12 
	#OSP_INT_DRDY
 0x01

	)

13 
	#OSP_INT_OVER
 0x02

	)

14 
	#OSP_DATA_LEN
 0x04

	)

15 
	#OSP_CONFIG
 0x05

	)

16 
	#OSP_DATA_LEN_L
 0x06

	)

17 
	#OSP_DATA_LEN_H
 0x07

	)

18 
	#OSP_INT_LEN
 0x08

	)

21 
	#OSP_ENABLE0
 0x10

	)

22 
	#OSP_ENABLE1
 0x11

	)

23 
	#OSP_RESULT
 0x40

	)

24 
	#OSP_RESULT_END
 0x7f

	)

26 
	#OSP_DATA_OUT
 0x80

	)

27 
	#OSP_DATA_OUT_END
 0xbf

	)

28 
	#OSP_DATA_IN
 0x0c

	)

29 
	#OSP_DATA_IN_END
 0xff

	)

	@/usr/include/linux/i2c.h

26 #i‚de‡
_LINUX_I2C_H


27 
	#_LINUX_I2C_H


	)

29 
	~<löux/ty≥s.h
>

67 
	si2c_msg
 {

68 
__u16
 
	maddr
;

69 
__u16
 
	mÊags
;

70 
	#I2C_M_TEN
 0x0010

	)

71 
	#I2C_M_RD
 0x0001

	)

72 
	#I2C_M_NOSTART
 0x4000

	)

73 
	#I2C_M_REV_DIR_ADDR
 0x2000

	)

74 
	#I2C_M_IGNORE_NAK
 0x1000

	)

75 
	#I2C_M_NO_RD_ACK
 0x0800

	)

76 
	#I2C_M_RECV_LEN
 0x0400

	)

77 
__u16
 
	mÀn
;

78 
__u8
 *
	mbuf
;

83 
	#I2C_FUNC_I2C
 0x00000001

	)

84 
	#I2C_FUNC_10BIT_ADDR
 0x00000002

	)

85 
	#I2C_FUNC_PROTOCOL_MANGLING
 0x00000004

	)

86 
	#I2C_FUNC_SMBUS_PEC
 0x00000008

	)

87 
	#I2C_FUNC_SMBUS_BLOCK_PROC_CALL
 0x00008000

	)

88 
	#I2C_FUNC_SMBUS_QUICK
 0x00010000

	)

89 
	#I2C_FUNC_SMBUS_READ_BYTE
 0x00020000

	)

90 
	#I2C_FUNC_SMBUS_WRITE_BYTE
 0x00040000

	)

91 
	#I2C_FUNC_SMBUS_READ_BYTE_DATA
 0x00080000

	)

92 
	#I2C_FUNC_SMBUS_WRITE_BYTE_DATA
 0x00100000

	)

93 
	#I2C_FUNC_SMBUS_READ_WORD_DATA
 0x00200000

	)

94 
	#I2C_FUNC_SMBUS_WRITE_WORD_DATA
 0x00400000

	)

95 
	#I2C_FUNC_SMBUS_PROC_CALL
 0x00800000

	)

96 
	#I2C_FUNC_SMBUS_READ_BLOCK_DATA
 0x01000000

	)

97 
	#I2C_FUNC_SMBUS_WRITE_BLOCK_DATA
 0x02000000

	)

98 
	#I2C_FUNC_SMBUS_READ_I2C_BLOCK
 0x04000000

	)

99 
	#I2C_FUNC_SMBUS_WRITE_I2C_BLOCK
 0x08000000

	)

101 
	#I2C_FUNC_SMBUS_BYTE
 (
I2C_FUNC_SMBUS_READ_BYTE
 | \

102 
I2C_FUNC_SMBUS_WRITE_BYTE
)

	)

103 
	#I2C_FUNC_SMBUS_BYTE_DATA
 (
I2C_FUNC_SMBUS_READ_BYTE_DATA
 | \

104 
I2C_FUNC_SMBUS_WRITE_BYTE_DATA
)

	)

105 
	#I2C_FUNC_SMBUS_WORD_DATA
 (
I2C_FUNC_SMBUS_READ_WORD_DATA
 | \

106 
I2C_FUNC_SMBUS_WRITE_WORD_DATA
)

	)

107 
	#I2C_FUNC_SMBUS_BLOCK_DATA
 (
I2C_FUNC_SMBUS_READ_BLOCK_DATA
 | \

108 
I2C_FUNC_SMBUS_WRITE_BLOCK_DATA
)

	)

109 
	#I2C_FUNC_SMBUS_I2C_BLOCK
 (
I2C_FUNC_SMBUS_READ_I2C_BLOCK
 | \

110 
I2C_FUNC_SMBUS_WRITE_I2C_BLOCK
)

	)

112 
	#I2C_FUNC_SMBUS_EMUL
 (
I2C_FUNC_SMBUS_QUICK
 | \

113 
I2C_FUNC_SMBUS_BYTE
 | \

114 
I2C_FUNC_SMBUS_BYTE_DATA
 | \

115 
I2C_FUNC_SMBUS_WORD_DATA
 | \

116 
I2C_FUNC_SMBUS_PROC_CALL
 | \

117 
I2C_FUNC_SMBUS_WRITE_BLOCK_DATA
 | \

118 
I2C_FUNC_SMBUS_I2C_BLOCK
 | \

119 
I2C_FUNC_SMBUS_PEC
)

	)

124 
	#I2C_SMBUS_BLOCK_MAX
 32

	)

125 
	ui2c_smbus_d©a
 {

126 
__u8
 
	mbyã
;

127 
__u16
 
	mw‹d
;

128 
__u8
 
	mblock
[
I2C_SMBUS_BLOCK_MAX
 + 2];

133 
	#I2C_SMBUS_READ
 1

	)

134 
	#I2C_SMBUS_WRITE
 0

	)

138 
	#I2C_SMBUS_QUICK
 0

	)

139 
	#I2C_SMBUS_BYTE
 1

	)

140 
	#I2C_SMBUS_BYTE_DATA
 2

	)

141 
	#I2C_SMBUS_WORD_DATA
 3

	)

142 
	#I2C_SMBUS_PROC_CALL
 4

	)

143 
	#I2C_SMBUS_BLOCK_DATA
 5

	)

144 
	#I2C_SMBUS_I2C_BLOCK_BROKEN
 6

	)

145 
	#I2C_SMBUS_BLOCK_PROC_CALL
 7

	)

146 
	#I2C_SMBUS_I2C_BLOCK_DATA
 8

	)

	@/usr/include/linux/input.h

1 #i‚de‡
_INPUT_H


2 
	#_INPUT_H


	)

12 
	~<sys/time.h
>

13 
	~<sys/io˘l.h
>

14 
	~<sys/ty≥s.h
>

15 
	~<löux/ty≥s.h
>

21 
	söput_evít
 {

22 
timevÆ
 
	mtime
;

23 
__u16
 
	mty≥
;

24 
__u16
 
	mcode
;

25 
__s32
 
	mvÆue
;

32 
	#EV_VERSION
 0x010001

	)

38 
	söput_id
 {

39 
__u16
 
	mbu°y≥
;

40 
__u16
 
	mvíd‹
;

41 
__u16
 
	m¥odu˘
;

42 
__u16
 
	mvîsi⁄
;

64 
	söput_absöfo
 {

65 
__s32
 
	mvÆue
;

66 
__s32
 
	mmöimum
;

67 
__s32
 
	mmaximum
;

68 
__s32
 
	mfuzz
;

69 
__s32
 
	mÊ©
;

70 
__s32
 
	mªsﬁuti⁄
;

88 
	söput_keym≠_íåy
 {

89 
	#INPUT_KEYMAP_BY_INDEX
 (1 << 0)

	)

90 
__u8
 
	mÊags
;

91 
__u8
 
	mÀn
;

92 
__u16
 
	mödex
;

93 
__u32
 
	mkeycode
;

94 
__u8
 
	msˇncode
[32];

97 
	#EVIOCGVERSION
 
	`_IOR
('E', 0x01, Ë

	)

98 
	#EVIOCGID
 
	`_IOR
('E', 0x02, 
öput_id
Ë

	)

99 
	#EVIOCGREP
 
	`_IOR
('E', 0x03, [2]Ë

	)

100 
	#EVIOCSREP
 
	`_IOW
('E', 0x03, [2]Ë

	)

102 
	#EVIOCGKEYCODE
 
	`_IOR
('E', 0x04, [2]Ë

	)

103 
	#EVIOCGKEYCODE_V2
 
	`_IOR
('E', 0x04, 
öput_keym≠_íåy
)

	)

104 
	#EVIOCSKEYCODE
 
	`_IOW
('E', 0x04, [2]Ë

	)

105 
	#EVIOCSKEYCODE_V2
 
	`_IOW
('E', 0x04, 
öput_keym≠_íåy
)

	)

107 
	#EVIOCGNAME
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x06,ÜíË

	)

108 
	#EVIOCGPHYS
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x07,ÜíË

	)

109 
	#EVIOCGUNIQ
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x08,ÜíË

	)

110 
	#EVIOCGPROP
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x09,ÜíË

	)

112 
	#EVIOCGKEY
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x18,ÜíË

	)

113 
	#EVIOCGLED
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x19,ÜíË

	)

114 
	#EVIOCGSND
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x1a,ÜíË

	)

115 
	#EVIOCGSW
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x1b,ÜíË

	)

117 
	#EVIOCGBIT
(
ev
,
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x20 + (ev),ÜíË

	)

118 
	#EVIOCGABS
(
abs
Ë
	`_IOR
('E', 0x40 + (abs), 
öput_absöfo
Ë

	)

119 
	#EVIOCSABS
(
abs
Ë
	`_IOW
('E', 0xc0 + (abs), 
öput_absöfo
Ë

	)

121 
	#EVIOCSFF
 
	`_IOC
(
_IOC_WRITE
, 'E', 0x80, (
ff_ef„˘
)Ë

	)

122 
	#EVIOCRMFF
 
	`_IOW
('E', 0x81, Ë

	)

123 
	#EVIOCGEFFECTS
 
	`_IOR
('E', 0x84, Ë

	)

125 
	#EVIOCGRAB
 
	`_IOW
('E', 0x90, Ë

	)

131 
	#INPUT_PROP_POINTER
 0x00

	)

132 
	#INPUT_PROP_DIRECT
 0x01

	)

133 
	#INPUT_PROP_BUTTONPAD
 0x02

	)

134 
	#INPUT_PROP_SEMI_MT
 0x03

	)

136 
	#INPUT_PROP_MAX
 0x1f

	)

137 
	#INPUT_PROP_CNT
 (
INPUT_PROP_MAX
 + 1)

	)

143 
	#EV_SYN
 0x00

	)

144 
	#EV_KEY
 0x01

	)

145 
	#EV_REL
 0x02

	)

146 
	#EV_ABS
 0x03

	)

147 
	#EV_MSC
 0x04

	)

148 
	#EV_SW
 0x05

	)

149 
	#EV_LED
 0x11

	)

150 
	#EV_SND
 0x12

	)

151 
	#EV_REP
 0x14

	)

152 
	#EV_FF
 0x15

	)

153 
	#EV_PWR
 0x16

	)

154 
	#EV_FF_STATUS
 0x17

	)

155 
	#EV_MAX
 0x1f

	)

156 
	#EV_CNT
 (
EV_MAX
+1)

	)

162 
	#SYN_REPORT
 0

	)

163 
	#SYN_CONFIG
 1

	)

164 
	#SYN_MT_REPORT
 2

	)

165 
	#SYN_DROPPED
 3

	)

178 
	#KEY_RESERVED
 0

	)

179 
	#KEY_ESC
 1

	)

180 
	#KEY_1
 2

	)

181 
	#KEY_2
 3

	)

182 
	#KEY_3
 4

	)

183 
	#KEY_4
 5

	)

184 
	#KEY_5
 6

	)

185 
	#KEY_6
 7

	)

186 
	#KEY_7
 8

	)

187 
	#KEY_8
 9

	)

188 
	#KEY_9
 10

	)

189 
	#KEY_0
 11

	)

190 
	#KEY_MINUS
 12

	)

191 
	#KEY_EQUAL
 13

	)

192 
	#KEY_BACKSPACE
 14

	)

193 
	#KEY_TAB
 15

	)

194 
	#KEY_Q
 16

	)

195 
	#KEY_W
 17

	)

196 
	#KEY_E
 18

	)

197 
	#KEY_R
 19

	)

198 
	#KEY_T
 20

	)

199 
	#KEY_Y
 21

	)

200 
	#KEY_U
 22

	)

201 
	#KEY_I
 23

	)

202 
	#KEY_O
 24

	)

203 
	#KEY_P
 25

	)

204 
	#KEY_LEFTBRACE
 26

	)

205 
	#KEY_RIGHTBRACE
 27

	)

206 
	#KEY_ENTER
 28

	)

207 
	#KEY_LEFTCTRL
 29

	)

208 
	#KEY_A
 30

	)

209 
	#KEY_S
 31

	)

210 
	#KEY_D
 32

	)

211 
	#KEY_F
 33

	)

212 
	#KEY_G
 34

	)

213 
	#KEY_H
 35

	)

214 
	#KEY_J
 36

	)

215 
	#KEY_K
 37

	)

216 
	#KEY_L
 38

	)

217 
	#KEY_SEMICOLON
 39

	)

218 
	#KEY_APOSTROPHE
 40

	)

219 
	#KEY_GRAVE
 41

	)

220 
	#KEY_LEFTSHIFT
 42

	)

221 
	#KEY_BACKSLASH
 43

	)

222 
	#KEY_Z
 44

	)

223 
	#KEY_X
 45

	)

224 
	#KEY_C
 46

	)

225 
	#KEY_V
 47

	)

226 
	#KEY_B
 48

	)

227 
	#KEY_N
 49

	)

228 
	#KEY_M
 50

	)

229 
	#KEY_COMMA
 51

	)

230 
	#KEY_DOT
 52

	)

231 
	#KEY_SLASH
 53

	)

232 
	#KEY_RIGHTSHIFT
 54

	)

233 
	#KEY_KPASTERISK
 55

	)

234 
	#KEY_LEFTALT
 56

	)

235 
	#KEY_SPACE
 57

	)

236 
	#KEY_CAPSLOCK
 58

	)

237 
	#KEY_F1
 59

	)

238 
	#KEY_F2
 60

	)

239 
	#KEY_F3
 61

	)

240 
	#KEY_F4
 62

	)

241 
	#KEY_F5
 63

	)

242 
	#KEY_F6
 64

	)

243 
	#KEY_F7
 65

	)

244 
	#KEY_F8
 66

	)

245 
	#KEY_F9
 67

	)

246 
	#KEY_F10
 68

	)

247 
	#KEY_NUMLOCK
 69

	)

248 
	#KEY_SCROLLLOCK
 70

	)

249 
	#KEY_KP7
 71

	)

250 
	#KEY_KP8
 72

	)

251 
	#KEY_KP9
 73

	)

252 
	#KEY_KPMINUS
 74

	)

253 
	#KEY_KP4
 75

	)

254 
	#KEY_KP5
 76

	)

255 
	#KEY_KP6
 77

	)

256 
	#KEY_KPPLUS
 78

	)

257 
	#KEY_KP1
 79

	)

258 
	#KEY_KP2
 80

	)

259 
	#KEY_KP3
 81

	)

260 
	#KEY_KP0
 82

	)

261 
	#KEY_KPDOT
 83

	)

263 
	#KEY_ZENKAKUHANKAKU
 85

	)

264 
	#KEY_102ND
 86

	)

265 
	#KEY_F11
 87

	)

266 
	#KEY_F12
 88

	)

267 
	#KEY_RO
 89

	)

268 
	#KEY_KATAKANA
 90

	)

269 
	#KEY_HIRAGANA
 91

	)

270 
	#KEY_HENKAN
 92

	)

271 
	#KEY_KATAKANAHIRAGANA
 93

	)

272 
	#KEY_MUHENKAN
 94

	)

273 
	#KEY_KPJPCOMMA
 95

	)

274 
	#KEY_KPENTER
 96

	)

275 
	#KEY_RIGHTCTRL
 97

	)

276 
	#KEY_KPSLASH
 98

	)

277 
	#KEY_SYSRQ
 99

	)

278 
	#KEY_RIGHTALT
 100

	)

279 
	#KEY_LINEFEED
 101

	)

280 
	#KEY_HOME
 102

	)

281 
	#KEY_UP
 103

	)

282 
	#KEY_PAGEUP
 104

	)

283 
	#KEY_LEFT
 105

	)

284 
	#KEY_RIGHT
 106

	)

285 
	#KEY_END
 107

	)

286 
	#KEY_DOWN
 108

	)

287 
	#KEY_PAGEDOWN
 109

	)

288 
	#KEY_INSERT
 110

	)

289 
	#KEY_DELETE
 111

	)

290 
	#KEY_MACRO
 112

	)

291 
	#KEY_MUTE
 113

	)

292 
	#KEY_VOLUMEDOWN
 114

	)

293 
	#KEY_VOLUMEUP
 115

	)

294 
	#KEY_POWER
 116

	)

295 
	#KEY_KPEQUAL
 117

	)

296 
	#KEY_KPPLUSMINUS
 118

	)

297 
	#KEY_PAUSE
 119

	)

298 
	#KEY_SCALE
 120

	)

300 
	#KEY_KPCOMMA
 121

	)

301 
	#KEY_HANGEUL
 122

	)

302 
	#KEY_HANGUEL
 
KEY_HANGEUL


	)

303 
	#KEY_HANJA
 123

	)

304 
	#KEY_YEN
 124

	)

305 
	#KEY_LEFTMETA
 125

	)

306 
	#KEY_RIGHTMETA
 126

	)

307 
	#KEY_COMPOSE
 127

	)

309 
	#KEY_STOP
 128

	)

310 
	#KEY_AGAIN
 129

	)

311 
	#KEY_PROPS
 130

	)

312 
	#KEY_UNDO
 131

	)

313 
	#KEY_FRONT
 132

	)

314 
	#KEY_COPY
 133

	)

315 
	#KEY_OPEN
 134

	)

316 
	#KEY_PASTE
 135

	)

317 
	#KEY_FIND
 136

	)

318 
	#KEY_CUT
 137

	)

319 
	#KEY_HELP
 138

	)

320 
	#KEY_MENU
 139

	)

321 
	#KEY_CALC
 140

	)

322 
	#KEY_SETUP
 141

	)

323 
	#KEY_SLEEP
 142

	)

324 
	#KEY_WAKEUP
 143

	)

325 
	#KEY_FILE
 144

	)

326 
	#KEY_SENDFILE
 145

	)

327 
	#KEY_DELETEFILE
 146

	)

328 
	#KEY_XFER
 147

	)

329 
	#KEY_PROG1
 148

	)

330 
	#KEY_PROG2
 149

	)

331 
	#KEY_WWW
 150

	)

332 
	#KEY_MSDOS
 151

	)

333 
	#KEY_COFFEE
 152

	)

334 
	#KEY_SCREENLOCK
 
KEY_COFFEE


	)

335 
	#KEY_DIRECTION
 153

	)

336 
	#KEY_CYCLEWINDOWS
 154

	)

337 
	#KEY_MAIL
 155

	)

338 
	#KEY_BOOKMARKS
 156

	)

339 
	#KEY_COMPUTER
 157

	)

340 
	#KEY_BACK
 158

	)

341 
	#KEY_FORWARD
 159

	)

342 
	#KEY_CLOSECD
 160

	)

343 
	#KEY_EJECTCD
 161

	)

344 
	#KEY_EJECTCLOSECD
 162

	)

345 
	#KEY_NEXTSONG
 163

	)

346 
	#KEY_PLAYPAUSE
 164

	)

347 
	#KEY_PREVIOUSSONG
 165

	)

348 
	#KEY_STOPCD
 166

	)

349 
	#KEY_RECORD
 167

	)

350 
	#KEY_REWIND
 168

	)

351 
	#KEY_PHONE
 169

	)

352 
	#KEY_ISO
 170

	)

353 
	#KEY_CONFIG
 171

	)

354 
	#KEY_HOMEPAGE
 172

	)

355 
	#KEY_REFRESH
 173

	)

356 
	#KEY_EXIT
 174

	)

357 
	#KEY_MOVE
 175

	)

358 
	#KEY_EDIT
 176

	)

359 
	#KEY_SCROLLUP
 177

	)

360 
	#KEY_SCROLLDOWN
 178

	)

361 
	#KEY_KPLEFTPAREN
 179

	)

362 
	#KEY_KPRIGHTPAREN
 180

	)

363 
	#KEY_NEW
 181

	)

364 
	#KEY_REDO
 182

	)

366 
	#KEY_F13
 183

	)

367 
	#KEY_F14
 184

	)

368 
	#KEY_F15
 185

	)

369 
	#KEY_F16
 186

	)

370 
	#KEY_F17
 187

	)

371 
	#KEY_F18
 188

	)

372 
	#KEY_F19
 189

	)

373 
	#KEY_F20
 190

	)

374 
	#KEY_F21
 191

	)

375 
	#KEY_F22
 192

	)

376 
	#KEY_F23
 193

	)

377 
	#KEY_F24
 194

	)

379 
	#KEY_PLAYCD
 200

	)

380 
	#KEY_PAUSECD
 201

	)

381 
	#KEY_PROG3
 202

	)

382 
	#KEY_PROG4
 203

	)

383 
	#KEY_DASHBOARD
 204

	)

384 
	#KEY_SUSPEND
 205

	)

385 
	#KEY_CLOSE
 206

	)

386 
	#KEY_PLAY
 207

	)

387 
	#KEY_FASTFORWARD
 208

	)

388 
	#KEY_BASSBOOST
 209

	)

389 
	#KEY_PRINT
 210

	)

390 
	#KEY_HP
 211

	)

391 
	#KEY_CAMERA
 212

	)

392 
	#KEY_SOUND
 213

	)

393 
	#KEY_QUESTION
 214

	)

394 
	#KEY_EMAIL
 215

	)

395 
	#KEY_CHAT
 216

	)

396 
	#KEY_SEARCH
 217

	)

397 
	#KEY_CONNECT
 218

	)

398 
	#KEY_FINANCE
 219

	)

399 
	#KEY_SPORT
 220

	)

400 
	#KEY_SHOP
 221

	)

401 
	#KEY_ALTERASE
 222

	)

402 
	#KEY_CANCEL
 223

	)

403 
	#KEY_BRIGHTNESSDOWN
 224

	)

404 
	#KEY_BRIGHTNESSUP
 225

	)

405 
	#KEY_MEDIA
 226

	)

407 
	#KEY_SWITCHVIDEOMODE
 227

	)

409 
	#KEY_KBDILLUMTOGGLE
 228

	)

410 
	#KEY_KBDILLUMDOWN
 229

	)

411 
	#KEY_KBDILLUMUP
 230

	)

413 
	#KEY_SEND
 231

	)

414 
	#KEY_REPLY
 232

	)

415 
	#KEY_FORWARDMAIL
 233

	)

416 
	#KEY_SAVE
 234

	)

417 
	#KEY_DOCUMENTS
 235

	)

419 
	#KEY_BATTERY
 236

	)

421 
	#KEY_BLUETOOTH
 237

	)

422 
	#KEY_WLAN
 238

	)

423 
	#KEY_UWB
 239

	)

425 
	#KEY_UNKNOWN
 240

	)

427 
	#KEY_VIDEO_NEXT
 241

	)

428 
	#KEY_VIDEO_PREV
 242

	)

429 
	#KEY_BRIGHTNESS_CYCLE
 243

	)

430 
	#KEY_BRIGHTNESS_ZERO
 244

	)

431 
	#KEY_DISPLAY_OFF
 245

	)

433 
	#KEY_WIMAX
 246

	)

434 
	#KEY_RFKILL
 247

	)

436 
	#KEY_MICMUTE
 248

	)

440 
	#BTN_MISC
 0x100

	)

441 
	#BTN_0
 0x100

	)

442 
	#BTN_1
 0x101

	)

443 
	#BTN_2
 0x102

	)

444 
	#BTN_3
 0x103

	)

445 
	#BTN_4
 0x104

	)

446 
	#BTN_5
 0x105

	)

447 
	#BTN_6
 0x106

	)

448 
	#BTN_7
 0x107

	)

449 
	#BTN_8
 0x108

	)

450 
	#BTN_9
 0x109

	)

452 
	#BTN_MOUSE
 0x110

	)

453 
	#BTN_LEFT
 0x110

	)

454 
	#BTN_RIGHT
 0x111

	)

455 
	#BTN_MIDDLE
 0x112

	)

456 
	#BTN_SIDE
 0x113

	)

457 
	#BTN_EXTRA
 0x114

	)

458 
	#BTN_FORWARD
 0x115

	)

459 
	#BTN_BACK
 0x116

	)

460 
	#BTN_TASK
 0x117

	)

462 
	#BTN_JOYSTICK
 0x120

	)

463 
	#BTN_TRIGGER
 0x120

	)

464 
	#BTN_THUMB
 0x121

	)

465 
	#BTN_THUMB2
 0x122

	)

466 
	#BTN_TOP
 0x123

	)

467 
	#BTN_TOP2
 0x124

	)

468 
	#BTN_PINKIE
 0x125

	)

469 
	#BTN_BASE
 0x126

	)

470 
	#BTN_BASE2
 0x127

	)

471 
	#BTN_BASE3
 0x128

	)

472 
	#BTN_BASE4
 0x129

	)

473 
	#BTN_BASE5
 0x12a

	)

474 
	#BTN_BASE6
 0x12b

	)

475 
	#BTN_DEAD
 0x12f

	)

477 
	#BTN_GAMEPAD
 0x130

	)

478 
	#BTN_A
 0x130

	)

479 
	#BTN_B
 0x131

	)

480 
	#BTN_C
 0x132

	)

481 
	#BTN_X
 0x133

	)

482 
	#BTN_Y
 0x134

	)

483 
	#BTN_Z
 0x135

	)

484 
	#BTN_TL
 0x136

	)

485 
	#BTN_TR
 0x137

	)

486 
	#BTN_TL2
 0x138

	)

487 
	#BTN_TR2
 0x139

	)

488 
	#BTN_SELECT
 0x13a

	)

489 
	#BTN_START
 0x13b

	)

490 
	#BTN_MODE
 0x13c

	)

491 
	#BTN_THUMBL
 0x13d

	)

492 
	#BTN_THUMBR
 0x13e

	)

494 
	#BTN_DIGI
 0x140

	)

495 
	#BTN_TOOL_PEN
 0x140

	)

496 
	#BTN_TOOL_RUBBER
 0x141

	)

497 
	#BTN_TOOL_BRUSH
 0x142

	)

498 
	#BTN_TOOL_PENCIL
 0x143

	)

499 
	#BTN_TOOL_AIRBRUSH
 0x144

	)

500 
	#BTN_TOOL_FINGER
 0x145

	)

501 
	#BTN_TOOL_MOUSE
 0x146

	)

502 
	#BTN_TOOL_LENS
 0x147

	)

503 
	#BTN_TOOL_QUINTTAP
 0x148

	)

504 
	#BTN_TOUCH
 0x14a

	)

505 
	#BTN_STYLUS
 0x14b

	)

506 
	#BTN_STYLUS2
 0x14c

	)

507 
	#BTN_TOOL_DOUBLETAP
 0x14d

	)

508 
	#BTN_TOOL_TRIPLETAP
 0x14e

	)

509 
	#BTN_TOOL_QUADTAP
 0x14‡

	)

511 
	#BTN_WHEEL
 0x150

	)

512 
	#BTN_GEAR_DOWN
 0x150

	)

513 
	#BTN_GEAR_UP
 0x151

	)

515 
	#KEY_OK
 0x160

	)

516 
	#KEY_SELECT
 0x161

	)

517 
	#KEY_GOTO
 0x162

	)

518 
	#KEY_CLEAR
 0x163

	)

519 
	#KEY_POWER2
 0x164

	)

520 
	#KEY_OPTION
 0x165

	)

521 
	#KEY_INFO
 0x166

	)

522 
	#KEY_TIME
 0x167

	)

523 
	#KEY_VENDOR
 0x168

	)

524 
	#KEY_ARCHIVE
 0x169

	)

525 
	#KEY_PROGRAM
 0x16®

	)

526 
	#KEY_CHANNEL
 0x16b

	)

527 
	#KEY_FAVORITES
 0x16c

	)

528 
	#KEY_EPG
 0x16d

	)

529 
	#KEY_PVR
 0x16ê

	)

530 
	#KEY_MHP
 0x16f

	)

531 
	#KEY_LANGUAGE
 0x170

	)

532 
	#KEY_TITLE
 0x171

	)

533 
	#KEY_SUBTITLE
 0x172

	)

534 
	#KEY_ANGLE
 0x173

	)

535 
	#KEY_ZOOM
 0x174

	)

536 
	#KEY_MODE
 0x175

	)

537 
	#KEY_KEYBOARD
 0x176

	)

538 
	#KEY_SCREEN
 0x177

	)

539 
	#KEY_PC
 0x178

	)

540 
	#KEY_TV
 0x179

	)

541 
	#KEY_TV2
 0x17®

	)

542 
	#KEY_VCR
 0x17b

	)

543 
	#KEY_VCR2
 0x17¯

	)

544 
	#KEY_SAT
 0x17d

	)

545 
	#KEY_SAT2
 0x17e

	)

546 
	#KEY_CD
 0x17‡

	)

547 
	#KEY_TAPE
 0x180

	)

548 
	#KEY_RADIO
 0x181

	)

549 
	#KEY_TUNER
 0x182

	)

550 
	#KEY_PLAYER
 0x183

	)

551 
	#KEY_TEXT
 0x184

	)

552 
	#KEY_DVD
 0x185

	)

553 
	#KEY_AUX
 0x186

	)

554 
	#KEY_MP3
 0x187

	)

555 
	#KEY_AUDIO
 0x188

	)

556 
	#KEY_VIDEO
 0x189

	)

557 
	#KEY_DIRECTORY
 0x18a

	)

558 
	#KEY_LIST
 0x18b

	)

559 
	#KEY_MEMO
 0x18¯

	)

560 
	#KEY_CALENDAR
 0x18d

	)

561 
	#KEY_RED
 0x18e

	)

562 
	#KEY_GREEN
 0x18f

	)

563 
	#KEY_YELLOW
 0x190

	)

564 
	#KEY_BLUE
 0x191

	)

565 
	#KEY_CHANNELUP
 0x192

	)

566 
	#KEY_CHANNELDOWN
 0x193

	)

567 
	#KEY_FIRST
 0x194

	)

568 
	#KEY_LAST
 0x195

	)

569 
	#KEY_AB
 0x196

	)

570 
	#KEY_NEXT
 0x197

	)

571 
	#KEY_RESTART
 0x198

	)

572 
	#KEY_SLOW
 0x199

	)

573 
	#KEY_SHUFFLE
 0x19a

	)

574 
	#KEY_BREAK
 0x19b

	)

575 
	#KEY_PREVIOUS
 0x19c

	)

576 
	#KEY_DIGITS
 0x19d

	)

577 
	#KEY_TEEN
 0x19e

	)

578 
	#KEY_TWEN
 0x19f

	)

579 
	#KEY_VIDEOPHONE
 0x1a0

	)

580 
	#KEY_GAMES
 0x1a1

	)

581 
	#KEY_ZOOMIN
 0x1a2

	)

582 
	#KEY_ZOOMOUT
 0x1a3

	)

583 
	#KEY_ZOOMRESET
 0x1a4

	)

584 
	#KEY_WORDPROCESSOR
 0x1a5

	)

585 
	#KEY_EDITOR
 0x1a6

	)

586 
	#KEY_SPREADSHEET
 0x1a7

	)

587 
	#KEY_GRAPHICSEDITOR
 0x1a8

	)

588 
	#KEY_PRESENTATION
 0x1a9

	)

589 
	#KEY_DATABASE
 0x1Ø

	)

590 
	#KEY_NEWS
 0x1ab

	)

591 
	#KEY_VOICEMAIL
 0x1a¯

	)

592 
	#KEY_ADDRESSBOOK
 0x1ad

	)

593 
	#KEY_MESSENGER
 0x1´

	)

594 
	#KEY_DISPLAYTOGGLE
 0x1a‡

	)

595 
	#KEY_SPELLCHECK
 0x1b0

	)

596 
	#KEY_LOGOFF
 0x1b1

	)

598 
	#KEY_DOLLAR
 0x1b2

	)

599 
	#KEY_EURO
 0x1b3

	)

601 
	#KEY_FRAMEBACK
 0x1b4

	)

602 
	#KEY_FRAMEFORWARD
 0x1b5

	)

603 
	#KEY_CONTEXT_MENU
 0x1b6

	)

604 
	#KEY_MEDIA_REPEAT
 0x1b7

	)

605 
	#KEY_10CHANNELSUP
 0x1b8

	)

606 
	#KEY_10CHANNELSDOWN
 0x1b9

	)

607 
	#KEY_IMAGES
 0x1b®

	)

609 
	#KEY_DEL_EOL
 0x1c0

	)

610 
	#KEY_DEL_EOS
 0x1c1

	)

611 
	#KEY_INS_LINE
 0x1c2

	)

612 
	#KEY_DEL_LINE
 0x1c3

	)

614 
	#KEY_FN
 0x1d0

	)

615 
	#KEY_FN_ESC
 0x1d1

	)

616 
	#KEY_FN_F1
 0x1d2

	)

617 
	#KEY_FN_F2
 0x1d3

	)

618 
	#KEY_FN_F3
 0x1d4

	)

619 
	#KEY_FN_F4
 0x1d5

	)

620 
	#KEY_FN_F5
 0x1d6

	)

621 
	#KEY_FN_F6
 0x1d7

	)

622 
	#KEY_FN_F7
 0x1d8

	)

623 
	#KEY_FN_F8
 0x1d9

	)

624 
	#KEY_FN_F9
 0x1da

	)

625 
	#KEY_FN_F10
 0x1db

	)

626 
	#KEY_FN_F11
 0x1dc

	)

627 
	#KEY_FN_F12
 0x1dd

	)

628 
	#KEY_FN_1
 0x1de

	)

629 
	#KEY_FN_2
 0x1df

	)

630 
	#KEY_FN_D
 0x1e0

	)

631 
	#KEY_FN_E
 0x1e1

	)

632 
	#KEY_FN_F
 0x1e2

	)

633 
	#KEY_FN_S
 0x1e3

	)

634 
	#KEY_FN_B
 0x1e4

	)

636 
	#KEY_BRL_DOT1
 0x1f1

	)

637 
	#KEY_BRL_DOT2
 0x1f2

	)

638 
	#KEY_BRL_DOT3
 0x1f3

	)

639 
	#KEY_BRL_DOT4
 0x1f4

	)

640 
	#KEY_BRL_DOT5
 0x1f5

	)

641 
	#KEY_BRL_DOT6
 0x1f6

	)

642 
	#KEY_BRL_DOT7
 0x1f7

	)

643 
	#KEY_BRL_DOT8
 0x1f8

	)

644 
	#KEY_BRL_DOT9
 0x1f9

	)

645 
	#KEY_BRL_DOT10
 0x1Á

	)

647 
	#KEY_NUMERIC_0
 0x200

	)

648 
	#KEY_NUMERIC_1
 0x201

	)

649 
	#KEY_NUMERIC_2
 0x202

	)

650 
	#KEY_NUMERIC_3
 0x203

	)

651 
	#KEY_NUMERIC_4
 0x204

	)

652 
	#KEY_NUMERIC_5
 0x205

	)

653 
	#KEY_NUMERIC_6
 0x206

	)

654 
	#KEY_NUMERIC_7
 0x207

	)

655 
	#KEY_NUMERIC_8
 0x208

	)

656 
	#KEY_NUMERIC_9
 0x209

	)

657 
	#KEY_NUMERIC_STAR
 0x20a

	)

658 
	#KEY_NUMERIC_POUND
 0x20b

	)

660 
	#KEY_CAMERA_FOCUS
 0x210

	)

661 
	#KEY_WPS_BUTTON
 0x211

	)

663 
	#KEY_TOUCHPAD_TOGGLE
 0x212

	)

664 
	#KEY_TOUCHPAD_ON
 0x213

	)

665 
	#KEY_TOUCHPAD_OFF
 0x214

	)

667 
	#KEY_CAMERA_ZOOMIN
 0x215

	)

668 
	#KEY_CAMERA_ZOOMOUT
 0x216

	)

669 
	#KEY_CAMERA_UP
 0x217

	)

670 
	#KEY_CAMERA_DOWN
 0x218

	)

671 
	#KEY_CAMERA_LEFT
 0x219

	)

672 
	#KEY_CAMERA_RIGHT
 0x21a

	)

674 
	#BTN_TRIGGER_HAPPY
 0x2c0

	)

675 
	#BTN_TRIGGER_HAPPY1
 0x2c0

	)

676 
	#BTN_TRIGGER_HAPPY2
 0x2c1

	)

677 
	#BTN_TRIGGER_HAPPY3
 0x2c2

	)

678 
	#BTN_TRIGGER_HAPPY4
 0x2c3

	)

679 
	#BTN_TRIGGER_HAPPY5
 0x2c4

	)

680 
	#BTN_TRIGGER_HAPPY6
 0x2c5

	)

681 
	#BTN_TRIGGER_HAPPY7
 0x2c6

	)

682 
	#BTN_TRIGGER_HAPPY8
 0x2c7

	)

683 
	#BTN_TRIGGER_HAPPY9
 0x2c8

	)

684 
	#BTN_TRIGGER_HAPPY10
 0x2c9

	)

685 
	#BTN_TRIGGER_HAPPY11
 0x2ˇ

	)

686 
	#BTN_TRIGGER_HAPPY12
 0x2cb

	)

687 
	#BTN_TRIGGER_HAPPY13
 0x2cc

	)

688 
	#BTN_TRIGGER_HAPPY14
 0x2cd

	)

689 
	#BTN_TRIGGER_HAPPY15
 0x2˚

	)

690 
	#BTN_TRIGGER_HAPPY16
 0x2cf

	)

691 
	#BTN_TRIGGER_HAPPY17
 0x2d0

	)

692 
	#BTN_TRIGGER_HAPPY18
 0x2d1

	)

693 
	#BTN_TRIGGER_HAPPY19
 0x2d2

	)

694 
	#BTN_TRIGGER_HAPPY20
 0x2d3

	)

695 
	#BTN_TRIGGER_HAPPY21
 0x2d4

	)

696 
	#BTN_TRIGGER_HAPPY22
 0x2d5

	)

697 
	#BTN_TRIGGER_HAPPY23
 0x2d6

	)

698 
	#BTN_TRIGGER_HAPPY24
 0x2d7

	)

699 
	#BTN_TRIGGER_HAPPY25
 0x2d8

	)

700 
	#BTN_TRIGGER_HAPPY26
 0x2d9

	)

701 
	#BTN_TRIGGER_HAPPY27
 0x2da

	)

702 
	#BTN_TRIGGER_HAPPY28
 0x2db

	)

703 
	#BTN_TRIGGER_HAPPY29
 0x2dc

	)

704 
	#BTN_TRIGGER_HAPPY30
 0x2dd

	)

705 
	#BTN_TRIGGER_HAPPY31
 0x2de

	)

706 
	#BTN_TRIGGER_HAPPY32
 0x2df

	)

707 
	#BTN_TRIGGER_HAPPY33
 0x2e0

	)

708 
	#BTN_TRIGGER_HAPPY34
 0x2e1

	)

709 
	#BTN_TRIGGER_HAPPY35
 0x2e2

	)

710 
	#BTN_TRIGGER_HAPPY36
 0x2e3

	)

711 
	#BTN_TRIGGER_HAPPY37
 0x2e4

	)

712 
	#BTN_TRIGGER_HAPPY38
 0x2e5

	)

713 
	#BTN_TRIGGER_HAPPY39
 0x2e6

	)

714 
	#BTN_TRIGGER_HAPPY40
 0x2e7

	)

717 
	#KEY_MIN_INTERESTING
 
KEY_MUTE


	)

718 
	#KEY_MAX
 0x2ff

	)

719 
	#KEY_CNT
 (
KEY_MAX
+1)

	)

725 
	#REL_X
 0x00

	)

726 
	#REL_Y
 0x01

	)

727 
	#REL_Z
 0x02

	)

728 
	#REL_RX
 0x03

	)

729 
	#REL_RY
 0x04

	)

730 
	#REL_RZ
 0x05

	)

731 
	#REL_HWHEEL
 0x06

	)

732 
	#REL_DIAL
 0x07

	)

733 
	#REL_WHEEL
 0x08

	)

734 
	#REL_MISC
 0x09

	)

735 
	#REL_MAX
 0x0f

	)

736 
	#REL_CNT
 (
REL_MAX
+1)

	)

742 
	#ABS_X
 0x00

	)

743 
	#ABS_Y
 0x01

	)

744 
	#ABS_Z
 0x02

	)

745 
	#ABS_RX
 0x03

	)

746 
	#ABS_RY
 0x04

	)

747 
	#ABS_RZ
 0x05

	)

748 
	#ABS_THROTTLE
 0x06

	)

749 
	#ABS_RUDDER
 0x07

	)

750 
	#ABS_WHEEL
 0x08

	)

751 
	#ABS_GAS
 0x09

	)

752 
	#ABS_BRAKE
 0x0a

	)

753 
	#ABS_HAT0X
 0x10

	)

754 
	#ABS_HAT0Y
 0x11

	)

755 
	#ABS_HAT1X
 0x12

	)

756 
	#ABS_HAT1Y
 0x13

	)

757 
	#ABS_HAT2X
 0x14

	)

758 
	#ABS_HAT2Y
 0x15

	)

759 
	#ABS_HAT3X
 0x16

	)

760 
	#ABS_HAT3Y
 0x17

	)

761 
	#ABS_PRESSURE
 0x18

	)

762 
	#ABS_DISTANCE
 0x19

	)

763 
	#ABS_TILT_X
 0x1a

	)

764 
	#ABS_TILT_Y
 0x1b

	)

765 
	#ABS_TOOL_WIDTH
 0x1c

	)

767 
	#ABS_VOLUME
 0x20

	)

769 
	#ABS_MISC
 0x28

	)

771 
	#ABS_MT_SLOT
 0x2‡

	)

772 
	#ABS_MT_TOUCH_MAJOR
 0x30

	)

773 
	#ABS_MT_TOUCH_MINOR
 0x31

	)

774 
	#ABS_MT_WIDTH_MAJOR
 0x32

	)

775 
	#ABS_MT_WIDTH_MINOR
 0x33

	)

776 
	#ABS_MT_ORIENTATION
 0x34

	)

777 
	#ABS_MT_POSITION_X
 0x35

	)

778 
	#ABS_MT_POSITION_Y
 0x36

	)

779 
	#ABS_MT_TOOL_TYPE
 0x37

	)

780 
	#ABS_MT_BLOB_ID
 0x38

	)

781 
	#ABS_MT_TRACKING_ID
 0x39

	)

782 
	#ABS_MT_PRESSURE
 0x3®

	)

783 
	#ABS_MT_DISTANCE
 0x3b

	)

786 
	#ABS_MAX
 0x3f

	)

787 
	#ABS_CNT
 (
ABS_MAX
+1)

	)

793 
	#SW_LID
 0x00

	)

794 
	#SW_TABLET_MODE
 0x01

	)

795 
	#SW_HEADPHONE_INSERT
 0x02

	)

796 
	#SW_RFKILL_ALL
 0x03

	)

798 
	#SW_RADIO
 
SW_RFKILL_ALL


	)

799 
	#SW_MICROPHONE_INSERT
 0x04

	)

800 
	#SW_DOCK
 0x05

	)

801 
	#SW_LINEOUT_INSERT
 0x06

	)

802 
	#SW_JACK_PHYSICAL_INSERT
 0x07

	)

803 
	#SW_VIDEOOUT_INSERT
 0x08

	)

804 
	#SW_CAMERA_LENS_COVER
 0x09

	)

805 
	#SW_KEYPAD_SLIDE
 0x0®

	)

806 
	#SW_FRONT_PROXIMITY
 0x0b

	)

807 
	#SW_ROTATE_LOCK
 0x0¯

	)

808 
	#SW_LINEIN_INSERT
 0x0d

	)

809 
	#SW_MAX
 0x0f

	)

810 
	#SW_CNT
 (
SW_MAX
+1)

	)

816 
	#MSC_SERIAL
 0x00

	)

817 
	#MSC_PULSELED
 0x01

	)

818 
	#MSC_GESTURE
 0x02

	)

819 
	#MSC_RAW
 0x03

	)

820 
	#MSC_SCAN
 0x04

	)

821 
	#MSC_MAX
 0x07

	)

822 
	#MSC_CNT
 (
MSC_MAX
+1)

	)

828 
	#LED_NUML
 0x00

	)

829 
	#LED_CAPSL
 0x01

	)

830 
	#LED_SCROLLL
 0x02

	)

831 
	#LED_COMPOSE
 0x03

	)

832 
	#LED_KANA
 0x04

	)

833 
	#LED_SLEEP
 0x05

	)

834 
	#LED_SUSPEND
 0x06

	)

835 
	#LED_MUTE
 0x07

	)

836 
	#LED_MISC
 0x08

	)

837 
	#LED_MAIL
 0x09

	)

838 
	#LED_CHARGING
 0x0a

	)

839 
	#LED_MAX
 0x0f

	)

840 
	#LED_CNT
 (
LED_MAX
+1)

	)

846 
	#REP_DELAY
 0x00

	)

847 
	#REP_PERIOD
 0x01

	)

848 
	#REP_MAX
 0x01

	)

849 
	#REP_CNT
 (
REP_MAX
+1)

	)

855 
	#SND_CLICK
 0x00

	)

856 
	#SND_BELL
 0x01

	)

857 
	#SND_TONE
 0x02

	)

858 
	#SND_MAX
 0x07

	)

859 
	#SND_CNT
 (
SND_MAX
+1)

	)

865 
	#ID_BUS
 0

	)

866 
	#ID_VENDOR
 1

	)

867 
	#ID_PRODUCT
 2

	)

868 
	#ID_VERSION
 3

	)

870 
	#BUS_PCI
 0x01

	)

871 
	#BUS_ISAPNP
 0x02

	)

872 
	#BUS_USB
 0x03

	)

873 
	#BUS_HIL
 0x04

	)

874 
	#BUS_BLUETOOTH
 0x05

	)

875 
	#BUS_VIRTUAL
 0x06

	)

877 
	#BUS_ISA
 0x10

	)

878 
	#BUS_I8042
 0x11

	)

879 
	#BUS_XTKBD
 0x12

	)

880 
	#BUS_RS232
 0x13

	)

881 
	#BUS_GAMEPORT
 0x14

	)

882 
	#BUS_PARPORT
 0x15

	)

883 
	#BUS_AMIGA
 0x16

	)

884 
	#BUS_ADB
 0x17

	)

885 
	#BUS_I2C
 0x18

	)

886 
	#BUS_HOST
 0x19

	)

887 
	#BUS_GSC
 0x1A

	)

888 
	#BUS_ATARI
 0x1B

	)

889 
	#BUS_SPI
 0x1C

	)

894 
	#MT_TOOL_FINGER
 0

	)

895 
	#MT_TOOL_PEN
 1

	)

896 
	#MT_TOOL_MAX
 1

	)

901 
	#FF_STATUS_STOPPED
 0x00

	)

902 
	#FF_STATUS_PLAYING
 0x01

	)

903 
	#FF_STATUS_MAX
 0x01

	)

920 
	sff_ª∂ay
 {

921 
__u16
 
	mÀngth
;

922 
__u16
 
	mdñay
;

930 
	sff_åiggî
 {

931 
__u16
 
	mbuâ⁄
;

932 
__u16
 
	möãrvÆ
;

947 
	sff_ívñ›e
 {

948 
__u16
 
	m©èck_Àngth
;

949 
__u16
 
	m©èck_Àvñ
;

950 
__u16
 
	mÁde_Àngth
;

951 
__u16
 
	mÁde_Àvñ
;

959 
	sff_c⁄°™t_ef„˘
 {

960 
__s16
 
	mÀvñ
;

961 
ff_ívñ›e
 
	mívñ›e
;

970 
	sff_ømp_ef„˘
 {

971 
__s16
 
	m°¨t_Àvñ
;

972 
__s16
 
	míd_Àvñ
;

973 
ff_ívñ›e
 
	mívñ›e
;

986 
	sff_c⁄dôi⁄_ef„˘
 {

987 
__u16
 
	mright_ßtuøti⁄
;

988 
__u16
 
	mÀ·_ßtuøti⁄
;

990 
__s16
 
	mright_c€ff
;

991 
__s16
 
	mÀ·_c€ff
;

993 
__u16
 
	mdódb™d
;

994 
__s16
 
	m˚¡î
;

1015 
	sff_≥riodic_ef„˘
 {

1016 
__u16
 
	mwavef‹m
;

1017 
__u16
 
	m≥riod
;

1018 
__s16
 
	mmagnôude
;

1019 
__s16
 
	moff£t
;

1020 
__u16
 
	mpha£
;

1022 
ff_ívñ›e
 
	mívñ›e
;

1024 
__u32
 
	mcu°om_Àn
;

1025 
__s16
 *
	mcu°om_d©a
;

1036 
	sff_rumbÀ_ef„˘
 {

1037 
__u16
 
	m°r⁄g_magnôude
;

1038 
__u16
 
	mwók_magnôude
;

1064 
	sff_ef„˘
 {

1065 
__u16
 
	mty≥
;

1066 
__s16
 
	mid
;

1067 
__u16
 
	mdúe˘i⁄
;

1068 
ff_åiggî
 
	måiggî
;

1069 
ff_ª∂ay
 
	mª∂ay
;

1072 
ff_c⁄°™t_ef„˘
 
	mc⁄°™t
;

1073 
ff_ømp_ef„˘
 
	mømp
;

1074 
ff_≥riodic_ef„˘
 
	m≥riodic
;

1075 
ff_c⁄dôi⁄_ef„˘
 
	mc⁄dôi⁄
[2];

1076 
ff_rumbÀ_ef„˘
 
	mrumbÀ
;

1077 } 
	mu
;

1084 
	#FF_RUMBLE
 0x50

	)

1085 
	#FF_PERIODIC
 0x51

	)

1086 
	#FF_CONSTANT
 0x52

	)

1087 
	#FF_SPRING
 0x53

	)

1088 
	#FF_FRICTION
 0x54

	)

1089 
	#FF_DAMPER
 0x55

	)

1090 
	#FF_INERTIA
 0x56

	)

1091 
	#FF_RAMP
 0x57

	)

1093 
	#FF_EFFECT_MIN
 
FF_RUMBLE


	)

1094 
	#FF_EFFECT_MAX
 
FF_RAMP


	)

1100 
	#FF_SQUARE
 0x58

	)

1101 
	#FF_TRIANGLE
 0x59

	)

1102 
	#FF_SINE
 0x5a

	)

1103 
	#FF_SAW_UP
 0x5b

	)

1104 
	#FF_SAW_DOWN
 0x5c

	)

1105 
	#FF_CUSTOM
 0x5d

	)

1107 
	#FF_WAVEFORM_MIN
 
FF_SQUARE


	)

1108 
	#FF_WAVEFORM_MAX
 
FF_CUSTOM


	)

1114 
	#FF_GAIN
 0x60

	)

1115 
	#FF_AUTOCENTER
 0x61

	)

1117 
	#FF_MAX
 0x7f

	)

1118 
	#FF_CNT
 (
FF_MAX
+1)

	)

	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/bits/wchar.h

20 #i‚de‡
_BITS_WCHAR_H


21 
	#_BITS_WCHAR_H
 1

	)

24 #ifde‡
__WCHAR_MAX__


25 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

27 
	#__WCHAR_MAX
 (2147483647)

	)

32 #ifde‡
__WCHAR_UNSIGNED__


33 
	#__WCHAR_MIN
 
L
'\0'

	)

37 #ñi‡
L
'\0' - 1 > 0

38 
	#__WCHAR_MIN
 
L
'\0'

	)

40 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__


4 
	#__WORDSIZE
 64

	)

5 
	#__WORDSIZE_COMPAT32
 1

	)

7 
	#__WORDSIZE
 32

	)

	@/usr/include/features.h

20 #i‚def 
_FEATURES_H


21 
	#_FEATURES_H
 1

	)

98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_POSIX


101 #unde‡
__USE_POSIX2


102 #unde‡
__USE_POSIX199309


103 #unde‡
__USE_POSIX199506


104 #unde‡
__USE_XOPEN


105 #unde‡
__USE_XOPEN_EXTENDED


106 #unde‡
__USE_UNIX98


107 #unde‡
__USE_XOPEN2K


108 #unde‡
__USE_XOPEN2KXSI


109 #unde‡
__USE_XOPEN2K8


110 #unde‡
__USE_XOPEN2K8XSI


111 #unde‡
__USE_LARGEFILE


112 #unde‡
__USE_LARGEFILE64


113 #unde‡
__USE_FILE_OFFSET64


114 #unde‡
__USE_BSD


115 #unde‡
__USE_SVID


116 #unde‡
__USE_MISC


117 #unde‡
__USE_ATFILE


118 #unde‡
__USE_GNU


119 #unde‡
__USE_REENTRANT


120 #unde‡
__USE_FORTIFY_LEVEL


121 #unde‡
__FAVOR_BSD


122 #unde‡
__KERNEL_STRICT_NAMES


126 #i‚de‡
_LOOSE_KERNEL_NAMES


127 
	#__KERNEL_STRICT_NAMES


	)

131 
	#__USE_ANSI
 1

	)

140 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


141 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

142 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

144 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

149 #i‡
deföed
 
_BSD_SOURCE
 && \

150 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

151 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

152 
	#__FAVOR_BSD
 1

	)

156 #ifde‡
_GNU_SOURCE


157 #unde‡
_ISOC95_SOURCE


158 
	#_ISOC95_SOURCE
 1

	)

159 #unde‡
_ISOC99_SOURCE


160 
	#_ISOC99_SOURCE
 1

	)

161 #unde‡
_POSIX_SOURCE


162 
	#_POSIX_SOURCE
 1

	)

163 #unde‡
_POSIX_C_SOURCE


164 
	#_POSIX_C_SOURCE
 200809L

	)

165 #unde‡
_XOPEN_SOURCE


166 
	#_XOPEN_SOURCE
 700

	)

167 #unde‡
_XOPEN_SOURCE_EXTENDED


168 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

169 #unde‡
_LARGEFILE64_SOURCE


170 
	#_LARGEFILE64_SOURCE
 1

	)

171 #unde‡
_BSD_SOURCE


172 
	#_BSD_SOURCE
 1

	)

173 #unde‡
_SVID_SOURCE


174 
	#_SVID_SOURCE
 1

	)

175 #unde‡
_ATFILE_SOURCE


176 
	#_ATFILE_SOURCE
 1

	)

181 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

182 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

183 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

184 
	#_BSD_SOURCE
 1

	)

185 
	#_SVID_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

194 
	#__USE_ISOC99
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

200 
	#__USE_ISOC95
 1

	)

205 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

206 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

207 
	#_POSIX_SOURCE
 1

	)

208 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

209 
	#_POSIX_C_SOURCE
 2

	)

210 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

211 
	#_POSIX_C_SOURCE
 199506L

	)

212 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

213 
	#_POSIX_C_SOURCE
 200112L

	)

215 
	#_POSIX_C_SOURCE
 200809L

	)

217 
	#__USE_POSIX_IMPLICITLY
 1

	)

220 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


221 
	#__USE_POSIX
 1

	)

224 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


225 
	#__USE_POSIX2
 1

	)

228 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

229 
	#__USE_POSIX199309
 1

	)

232 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

233 
	#__USE_POSIX199506
 1

	)

236 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

237 
	#__USE_XOPEN2K
 1

	)

238 #unde‡
__USE_ISOC95


239 
	#__USE_ISOC95
 1

	)

240 #unde‡
__USE_ISOC99


241 
	#__USE_ISOC99
 1

	)

244 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

245 
	#__USE_XOPEN2K8
 1

	)

246 #unde‡
_ATFILE_SOURCE


247 
	#_ATFILE_SOURCE
 1

	)

250 #ifdef 
_XOPEN_SOURCE


251 
	#__USE_XOPEN
 1

	)

252 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

253 
	#__USE_XOPEN_EXTENDED
 1

	)

254 
	#__USE_UNIX98
 1

	)

255 #unde‡
_LARGEFILE_SOURCE


256 
	#_LARGEFILE_SOURCE
 1

	)

257 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

258 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

259 
	#__USE_XOPEN2K8
 1

	)

260 
	#__USE_XOPEN2K8XSI
 1

	)

262 
	#__USE_XOPEN2K
 1

	)

263 
	#__USE_XOPEN2KXSI
 1

	)

264 #unde‡
__USE_ISOC95


265 
	#__USE_ISOC95
 1

	)

266 #unde‡
__USE_ISOC99


267 
	#__USE_ISOC99
 1

	)

270 #ifde‡
_XOPEN_SOURCE_EXTENDED


271 
	#__USE_XOPEN_EXTENDED
 1

	)

276 #ifde‡
_LARGEFILE_SOURCE


277 
	#__USE_LARGEFILE
 1

	)

280 #ifde‡
_LARGEFILE64_SOURCE


281 
	#__USE_LARGEFILE64
 1

	)

284 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

285 
	#__USE_FILE_OFFSET64
 1

	)

288 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


289 
	#__USE_MISC
 1

	)

292 #ifdef 
_BSD_SOURCE


293 
	#__USE_BSD
 1

	)

296 #ifdef 
_SVID_SOURCE


297 
	#__USE_SVID
 1

	)

300 #ifdef 
_ATFILE_SOURCE


301 
	#__USE_ATFILE
 1

	)

304 #ifdef 
_GNU_SOURCE


305 
	#__USE_GNU
 1

	)

308 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


309 
	#__USE_REENTRANT
 1

	)

312 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

313 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

314 #i‡
_FORTIFY_SOURCE
 > 1

315 
	#__USE_FORTIFY_LEVEL
 2

	)

317 
	#__USE_FORTIFY_LEVEL
 1

	)

320 
	#__USE_FORTIFY_LEVEL
 0

	)

324 
	~<bôs/¥edefs.h
>

327 
	#__STDC_ISO_10646__
 200009L

	)

335 #unde‡
__GNU_LIBRARY__


336 
	#__GNU_LIBRARY__
 6

	)

340 
	#__GLIBC__
 2

	)

341 
	#__GLIBC_MINOR__
 15

	)

343 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

344 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

347 #i‡
deföed
 
__GNUC__
 \

348 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

349 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

350 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

351 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

355 #i‚de‡
__ASSEMBLER__


356 #i‚de‡
_SYS_CDEFS_H


357 
	~<sys/cdefs.h
>

362 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


363 
	#__USE_LARGEFILE
 1

	)

364 
	#__USE_LARGEFILE64
 1

	)

370 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

371 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

372 && 
deföed
 
	g__exã∫_ölöe


373 
	#__USE_EXTERN_INLINES
 1

	)

378 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

379 && (
deföed
 
	g_LIBC
 || !deföed 
	g__OPTIMIZE_SIZE__
Ë&& !deföed 
	g__NO_INLINE__
 \

380 && 
deföed
 
	g__exã∫_ölöe


381 
	#__USE_EXTERN_INLINES_IN_LIBC
 1

	)

389 
	~<gnu/°ubs.h
>

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

46 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

48 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/sys/ioctl.h

19 #i‚def 
_SYS_IOCTL_H


20 
	#_SYS_IOCTL_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


27 
	~<bôs/io˘ls.h
>

30 
	~<bôs/io˘l-ty≥s.h
>

37 
	~<sys/âydeÁu…s.h
>

42 
	$io˘l
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

44 
__END_DECLS


	@/usr/include/sys/time.h

20 #i‚de‡
_SYS_TIME_H


21 
	#_SYS_TIME_H
 1

	)

23 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

26 
	#__√ed_time_t


	)

27 
	~<time.h
>

28 
	#__√ed_timevÆ


	)

29 
	~<bôs/time.h
>

31 
	~<sys/£À˘.h
>

33 #i‚de‡
__su£c⁄ds_t_deföed


34 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

35 
	#__su£c⁄ds_t_deföed


	)

39 
	g__BEGIN_DECLS


41 #ifde‡
__USE_GNU


43 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

44 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

45 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

46 }

	)

47 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

48 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

49 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

50 }

	)

54 #ifde‡
__USE_BSD


57 
	stimez⁄e


59 
	mtz_möuãswe°
;

60 
	mtz_d°time
;

63 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

65 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

73 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

74 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

76 #ifde‡
__USE_BSD


79 
	$£âimeofday
 (
__c⁄°
 
timevÆ
 *
__tv
,

80 
__c⁄°
 
timez⁄e
 *
__tz
)

81 
__THROW
 
	`__n⁄nuŒ
 ((1));

87 
	$adjtime
 (
__c⁄°
 
timevÆ
 *
__dñè
,

88 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

93 
	e__ôimî_which


96 
ITIMER_REAL
 = 0,

97 
	#ITIMER_REAL
 
ITIMER_REAL


	)

99 
ITIMER_VIRTUAL
 = 1,

100 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

103 
ITIMER_PROF
 = 2

104 
	#ITIMER_PROF
 
ITIMER_PROF


	)

109 
	sôimîvÆ


112 
timevÆ
 
ô_öãrvÆ
;

114 
timevÆ
 
ô_vÆue
;

117 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


120 
__ôimî_which
 
	t__ôimî_which_t
;

122 
	t__ôimî_which_t
;

127 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

128 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

133 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

134 
__c⁄°
 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

135 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

140 
	$utimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

141 
__THROW
 
	`__n⁄nuŒ
 ((1));

143 #ifde‡
__USE_BSD


145 
	$lutimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

146 
__THROW
 
	`__n⁄nuŒ
 ((1));

149 
	$futimes
 (
__fd
, 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

152 #ifde‡
__USE_GNU


156 
	$futimeßt
 (
__fd
, 
__c⁄°
 *
__fûe
,

157 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

161 #ifde‡
__USE_BSD


164 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

165 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

166 
	#timîcmp
(
a
, 
b
, 
CMP
) \

167 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

168 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

169 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

170 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

172 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

173 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

174 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

176 ++(
ªsu…
)->
tv_£c
; \

177 (
ªsu…
)->
tv_u£c
 -= 1000000; \

179 
	}
} 0)

	)

180 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

182 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

183 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

184 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

185 --(
ªsu…
)->
tv_£c
; \

186 (
ªsu…
)->
tv_u£c
 += 1000000; \

188 } 0)

	)

191 
	g__END_DECLS


	@/usr/include/sys/types.h

23 #i‚def 
_SYS_TYPES_H


24 
	#_SYS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 #ifdef 
__USE_BSD


33 #i‚de‡
__u_ch¨_deföed


34 
__u_ch¨
 
	tu_ch¨
;

35 
__u_sh‹t
 
	tu_sh‹t
;

36 
__u_öt
 
	tu_öt
;

37 
__u_l⁄g
 
	tu_l⁄g
;

38 
__quad_t
 
	tquad_t
;

39 
__u_quad_t
 
	tu_quad_t
;

40 
__fsid_t
 
	tfsid_t
;

41 
	#__u_ch¨_deföed


	)

45 
__loff_t
 
	tloff_t
;

47 #i‚de‡
__öo_t_deföed


48 #i‚de‡
__USE_FILE_OFFSET64


49 
__öo_t
 
	töo_t
;

51 
__öo64_t
 
	töo_t
;

53 
	#__öo_t_deföed


	)

55 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


56 
__öo64_t
 
	töo64_t
;

57 
	#__öo64_t_deföed


	)

60 #i‚de‡
__dev_t_deföed


61 
__dev_t
 
	tdev_t
;

62 
	#__dev_t_deföed


	)

65 #i‚de‡
__gid_t_deföed


66 
__gid_t
 
	tgid_t
;

67 
	#__gid_t_deföed


	)

70 #i‚de‡
__mode_t_deföed


71 
__mode_t
 
	tmode_t
;

72 
	#__mode_t_deföed


	)

75 #i‚de‡
__∆ök_t_deföed


76 
__∆ök_t
 
	t∆ök_t
;

77 
	#__∆ök_t_deföed


	)

80 #i‚de‡
__uid_t_deföed


81 
__uid_t
 
	tuid_t
;

82 
	#__uid_t_deföed


	)

85 #i‚de‡
__off_t_deföed


86 #i‚de‡
__USE_FILE_OFFSET64


87 
__off_t
 
	toff_t
;

89 
__off64_t
 
	toff_t
;

91 
	#__off_t_deföed


	)

93 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


94 
__off64_t
 
	toff64_t
;

95 
	#__off64_t_deföed


	)

98 #i‚de‡
__pid_t_deföed


99 
__pid_t
 
	tpid_t
;

100 
	#__pid_t_deföed


	)

103 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

104 && !
deföed
 
__id_t_deföed


105 
__id_t
 
	tid_t
;

106 
	#__id_t_deföed


	)

109 #i‚de‡
__ssize_t_deföed


110 
__ssize_t
 
	tssize_t
;

111 
	#__ssize_t_deföed


	)

114 #ifdef 
__USE_BSD


115 #i‚de‡
__daddr_t_deföed


116 
__daddr_t
 
	tdaddr_t
;

117 
__ˇddr_t
 
	tˇddr_t
;

118 
	#__daddr_t_deföed


	)

122 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


123 
__key_t
 
	tkey_t
;

124 
	#__key_t_deföed


	)

127 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


128 
	#__√ed_˛ock_t


	)

130 
	#__√ed_time_t


	)

131 
	#__√ed_timî_t


	)

132 
	#__√ed_˛ockid_t


	)

133 
	~<time.h
>

135 #ifde‡
__USE_XOPEN


136 #i‚de‡
__u£c⁄ds_t_deföed


137 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

138 
	#__u£c⁄ds_t_deföed


	)

140 #i‚de‡
__su£c⁄ds_t_deföed


141 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

142 
	#__su£c⁄ds_t_deföed


	)

146 
	#__√ed_size_t


	)

147 
	~<°ddef.h
>

149 #ifde‡
__USE_MISC


151 
	tul⁄g
;

152 
	tush‹t
;

153 
	tuöt
;

158 #i‡!
__GNUC_PREREQ
 (2, 7)

161 #i‚de‡
__öt8_t_deföed


162 
	#__öt8_t_deföed


	)

163 
	töt8_t
;

164 
	töt16_t
;

165 
	töt32_t
;

166 #i‡
__WORDSIZE
 == 64

167 
	töt64_t
;

168 #ñi‡
__GLIBC_HAVE_LONG_LONG


169 
__exãnsi⁄__
 
	töt64_t
;

174 
	tu_öt8_t
;

175 
	tu_öt16_t
;

176 
	tu_öt32_t
;

177 #i‡
__WORDSIZE
 == 64

178 
	tu_öt64_t
;

179 #ñi‡
__GLIBC_HAVE_LONG_LONG


180 
__exãnsi⁄__
 
	tu_öt64_t
;

183 
	tªgi°î_t
;

188 
	#__ötN_t
(
N
, 
MODE
) \

189 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

190 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

191 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

193 #i‚de‡
	t__öt8_t_deföed


194 
	t__öt8_t_deföed


	)

195 
	t__ötN_t
 (8, 
	t__QI__
);

196 
__ötN_t
 (16, 
__HI__
);

197 
__ötN_t
 (32, 
__SI__
);

198 
__ötN_t
 (64, 
__DI__
);

201 
__u_ötN_t
 (8, 
__QI__
);

202 
__u_ötN_t
 (16, 
__HI__
);

203 
__u_ötN_t
 (32, 
__SI__
);

204 
__u_ötN_t
 (64, 
__DI__
);

206 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

212 
	#__BIT_TYPES_DEFINED__
 1

	)

215 #ifdef 
__USE_BSD


217 
	~<ídün.h
>

220 
	~<sys/£À˘.h
>

223 
	~<sys/sysma¸os.h
>

227 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

228 && !
deföed
 
__blksize_t_deföed


229 
__blksize_t
 
	tblksize_t
;

230 
	#__blksize_t_deföed


	)

234 #i‚de‡
__USE_FILE_OFFSET64


235 #i‚de‡
__blk˙t_t_deföed


236 
__blk˙t_t
 
	tblk˙t_t
;

237 
	#__blk˙t_t_deföed


	)

239 #i‚de‡
__fsblk˙t_t_deföed


240 
__fsblk˙t_t
 
	tfsblk˙t_t
;

241 
	#__fsblk˙t_t_deföed


	)

243 #i‚de‡
__fsfû˙t_t_deföed


244 
__fsfû˙t_t
 
	tfsfû˙t_t
;

245 
	#__fsfû˙t_t_deföed


	)

248 #i‚de‡
__blk˙t_t_deföed


249 
__blk˙t64_t
 
	tblk˙t_t
;

250 
	#__blk˙t_t_deföed


	)

252 #i‚de‡
__fsblk˙t_t_deföed


253 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

254 
	#__fsblk˙t_t_deföed


	)

256 #i‚de‡
__fsfû˙t_t_deföed


257 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

258 
	#__fsfû˙t_t_deföed


	)

262 #ifde‡
__USE_LARGEFILE64


263 
__blk˙t64_t
 
	tblk˙t64_t
;

264 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

265 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

270 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


271 
	~<bôs/±hªadty≥s.h
>

274 
	g__END_DECLS


	@/usr/include/asm/types.h

1 #i‚de‡
_ASM_X86_TYPES_H


2 
	#_ASM_X86_TYPES_H


	)

4 
	~<asm-gíîic/ty≥s.h
>

	@/usr/include/bits/ioctl-types.h

20 #i‚de‡
_SYS_IOCTL_H


25 
	~<asm/io˘ls.h
>

28 
	swösize


30 
	mws_row
;

31 
	mws_cﬁ
;

32 
	mws_xpixñ
;

33 
	mws_ypixñ
;

36 
	#NCC
 8

	)

37 
	sãrmio


39 
	mc_iÊag
;

40 
	mc_oÊag
;

41 
	mc_cÊag
;

42 
	mc_lÊag
;

43 
	mc_löe
;

44 
	mc_cc
[
NCC
];

48 
	#TIOCM_LE
 0x001

	)

49 
	#TIOCM_DTR
 0x002

	)

50 
	#TIOCM_RTS
 0x004

	)

51 
	#TIOCM_ST
 0x008

	)

52 
	#TIOCM_SR
 0x010

	)

53 
	#TIOCM_CTS
 0x020

	)

54 
	#TIOCM_CAR
 0x040

	)

55 
	#TIOCM_RNG
 0x080

	)

56 
	#TIOCM_DSR
 0x100

	)

57 
	#TIOCM_CD
 
TIOCM_CAR


	)

58 
	#TIOCM_RI
 
TIOCM_RNG


	)

63 
	#N_TTY
 0

	)

64 
	#N_SLIP
 1

	)

65 
	#N_MOUSE
 2

	)

66 
	#N_PPP
 3

	)

67 
	#N_STRIP
 4

	)

68 
	#N_AX25
 5

	)

69 
	#N_X25
 6

	)

70 
	#N_6PACK
 7

	)

71 
	#N_MASC
 8

	)

72 
	#N_R3964
 9

	)

73 
	#N_PROFIBUS_FDL
 10

	)

74 
	#N_IRDA
 11

	)

75 
	#N_SMSBLOCK
 12

	)

76 
	#N_HDLC
 13

	)

77 
	#N_SYNC_PPP
 14

	)

78 
	#N_HCI
 15

	)

	@/usr/include/bits/ioctls.h

19 #i‚de‡
_SYS_IOCTL_H


24 
	~<asm/io˘ls.h
>

27 
	#SIOCADDRT
 0x890B

	)

28 
	#SIOCDELRT
 0x890C

	)

29 
	#SIOCRTMSG
 0x890D

	)

32 
	#SIOCGIFNAME
 0x8910

	)

33 
	#SIOCSIFLINK
 0x8911

	)

34 
	#SIOCGIFCONF
 0x8912

	)

35 
	#SIOCGIFFLAGS
 0x8913

	)

36 
	#SIOCSIFFLAGS
 0x8914

	)

37 
	#SIOCGIFADDR
 0x8915

	)

38 
	#SIOCSIFADDR
 0x8916

	)

39 
	#SIOCGIFDSTADDR
 0x8917

	)

40 
	#SIOCSIFDSTADDR
 0x8918

	)

41 
	#SIOCGIFBRDADDR
 0x8919

	)

42 
	#SIOCSIFBRDADDR
 0x891®

	)

43 
	#SIOCGIFNETMASK
 0x891b

	)

44 
	#SIOCSIFNETMASK
 0x891¯

	)

45 
	#SIOCGIFMETRIC
 0x891d

	)

46 
	#SIOCSIFMETRIC
 0x891ê

	)

47 
	#SIOCGIFMEM
 0x891‡

	)

48 
	#SIOCSIFMEM
 0x8920

	)

49 
	#SIOCGIFMTU
 0x8921

	)

50 
	#SIOCSIFMTU
 0x8922

	)

51 
	#SIOCSIFNAME
 0x8923

	)

52 
	#SIOCSIFHWADDR
 0x8924

	)

53 
	#SIOCGIFENCAP
 0x8925

	)

54 
	#SIOCSIFENCAP
 0x8926

	)

55 
	#SIOCGIFHWADDR
 0x8927

	)

56 
	#SIOCGIFSLAVE
 0x8929

	)

57 
	#SIOCSIFSLAVE
 0x8930

	)

58 
	#SIOCADDMULTI
 0x8931

	)

59 
	#SIOCDELMULTI
 0x8932

	)

60 
	#SIOCGIFINDEX
 0x8933

	)

61 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

62 
	#SIOCSIFPFLAGS
 0x8934

	)

63 
	#SIOCGIFPFLAGS
 0x8935

	)

64 
	#SIOCDIFADDR
 0x8936

	)

65 
	#SIOCSIFHWBROADCAST
 0x8937

	)

66 
	#SIOCGIFCOUNT
 0x8938

	)

68 
	#SIOCGIFBR
 0x8940

	)

69 
	#SIOCSIFBR
 0x8941

	)

71 
	#SIOCGIFTXQLEN
 0x8942

	)

72 
	#SIOCSIFTXQLEN
 0x8943

	)

77 
	#SIOCDARP
 0x8953

	)

78 
	#SIOCGARP
 0x8954

	)

79 
	#SIOCSARP
 0x8955

	)

82 
	#SIOCDRARP
 0x8960

	)

83 
	#SIOCGRARP
 0x8961

	)

84 
	#SIOCSRARP
 0x8962

	)

88 
	#SIOCGIFMAP
 0x8970

	)

89 
	#SIOCSIFMAP
 0x8971

	)

93 
	#SIOCADDDLCI
 0x8980

	)

94 
	#SIOCDELDLCI
 0x8981

	)

103 
	#SIOCDEVPRIVATE
 0x89F0

	)

109 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/bits/predefs.h

19 #i‚de‡
_FEATURES_H


23 #i‚de‡
_PREDEFS_H


24 
	#_PREDEFS_H


	)

27 
	#__STDC_IEC_559__
 1

	)

28 
	#__STDC_IEC_559_COMPLEX__
 1

	)

	@/usr/include/bits/pthreadtypes.h

20 #i‚de‡
_BITS_PTHREADTYPES_H


21 
	#_BITS_PTHREADTYPES_H
 1

	)

23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

29 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

30 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

31 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

32 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

34 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

36 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

37 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

38 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

39 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

40 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

43 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

50 
	t±hªad_t
;

55 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

56 
	m__Æign
;

57 } 
	t±hªad_©å_t
;

60 #i‡
__WORDSIZE
 == 64

61 
	s__±hªad_öã∫Æ_li°


63 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

64 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

65 } 
	t__±hªad_li°_t
;

67 
	s__±hªad_öã∫Æ_¶i°


69 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

70 } 
	t__±hªad_¶i°_t
;

78 
	s__±hªad_muãx_s


80 
	m__lock
;

81 
	m__cou¡
;

82 
	m__ow√r
;

83 #i‡
__WORDSIZE
 == 64

84 
	m__nu£rs
;

88 
	m__köd
;

89 #i‡
__WORDSIZE
 == 64

90 
	m__•ös
;

91 
__±hªad_li°_t
 
	m__li°
;

92 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

94 
	m__nu£rs
;

95 
__exãnsi⁄__
 union

97 
	m__•ös
;

98 
__±hªad_¶i°_t
 
	m__li°
;

101 } 
	m__d©a
;

102 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

103 
	m__Æign
;

104 } 
	t±hªad_muãx_t
;

108 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

109 
	m__Æign
;

110 } 
	t±hªad_muãx©å_t
;

119 
	m__lock
;

120 
	m__fuãx
;

121 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

122 
__exãnsi⁄__
 
	m__wakeup_£q
;

123 
__exãnsi⁄__
 
	m__wokí_£q
;

124 *
	m__muãx
;

125 
	m__nwaôîs
;

126 
	m__brﬂdˇ°_£q
;

127 } 
	m__d©a
;

128 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

129 
__exãnsi⁄__
 
	m__Æign
;

130 } 
	t±hªad_c⁄d_t
;

134 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

135 
	m__Æign
;

136 } 
	t±hªad_c⁄d©å_t
;

140 
	t±hªad_key_t
;

144 
	t±hªad_⁄˚_t
;

147 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


152 #i‡
__WORDSIZE
 == 64

155 
	m__lock
;

156 
	m__ƒ_ªadîs
;

157 
	m__ªadîs_wakeup
;

158 
	m__wrôî_wakeup
;

159 
	m__ƒ_ªadîs_queued
;

160 
	m__ƒ_wrôîs_queued
;

161 
	m__wrôî
;

162 
	m__sh¨ed
;

163 
	m__∑d1
;

164 
	m__∑d2
;

167 
	m__Êags
;

168 } 
	m__d©a
;

172 
	m__lock
;

173 
	m__ƒ_ªadîs
;

174 
	m__ªadîs_wakeup
;

175 
	m__wrôî_wakeup
;

176 
	m__ƒ_ªadîs_queued
;

177 
	m__ƒ_wrôîs_queued
;

180 
	m__Êags
;

181 
	m__sh¨ed
;

182 
	m__∑d1
;

183 
	m__∑d2
;

184 
	m__wrôî
;

185 } 
	m__d©a
;

187 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

188 
	m__Æign
;

189 } 
	t±hªad_rwlock_t
;

193 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

194 
	m__Æign
;

195 } 
	t±hªad_rwlock©å_t
;

199 #ifde‡
__USE_XOPEN2K


201 vﬁ©ûê
	t±hªad_•ölock_t
;

208 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

209 
	m__Æign
;

210 } 
	t±hªad_b¨rõr_t
;

214 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

215 
	m__Æign
;

216 } 
	t±hªad_b¨rõøâr_t
;

220 #i‡
__WORDSIZE
 == 32

222 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/time.h

24 #i‡
deföed
 
__√ed_timevÆ
 || deföed 
__USE_GNU


25 #i‚de‡
_STRUCT_TIMEVAL


26 
	#_STRUCT_TIMEVAL
 1

	)

27 
	~<bôs/ty≥s.h
>

31 
	stimevÆ


33 
__time_t
 
	mtv_£c
;

34 
__su£c⁄ds_t
 
	mtv_u£c
;

39 #i‚de‡
__√ed_timevÆ


40 #i‚de‡
_BITS_TIME_H


41 
	#_BITS_TIME_H
 1

	)

49 
	#CLOCKS_PER_SEC
 1000000l

	)

51 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


54 
	~<bôs/ty≥s.h
>

55 
__sysc⁄f
 ();

56 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

59 #ifde‡
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

82 
	#TIMER_ABSTIME
 1

	)

85 #ifde‡
__USE_GNU


86 
	~<bôs/timex.h
>

88 
__BEGIN_DECLS


91 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

93 
__END_DECLS


99 #unde‡
__√ed_timevÆ


	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	t__u_ch¨
;

32 
	t__u_sh‹t
;

33 
	t__u_öt
;

34 
	t__u_l⁄g
;

37 sig√d 
	t__öt8_t
;

38 
	t__uöt8_t
;

39 sig√d 
	t__öt16_t
;

40 
	t__uöt16_t
;

41 sig√d 
	t__öt32_t
;

42 
	t__uöt32_t
;

43 #i‡
__WORDSIZE
 == 64

44 sig√d 
	t__öt64_t
;

45 
	t__uöt64_t
;

46 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


47 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

48 
__exãnsi⁄__
 
	t__uöt64_t
;

52 #i‡
__WORDSIZE
 == 64

53 
	t__quad_t
;

54 
	t__u_quad_t
;

55 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


56 
__exãnsi⁄__
 
	t__quad_t
;

57 
__exãnsi⁄__
 
	t__u_quad_t
;

61 
	m__vÆ
[2];

62 } 
	t__quad_t
;

65 
__u_l⁄g
 
	m__vÆ
[2];

66 } 
	t__u_quad_t
;

99 
	#__S16_TYPE
 

	)

100 
	#__U16_TYPE
 

	)

101 
	#__S32_TYPE
 

	)

102 
	#__U32_TYPE
 

	)

103 
	#__SLONGWORD_TYPE
 

	)

104 
	#__ULONGWORD_TYPE
 

	)

105 #i‡
__WORDSIZE
 == 32

106 
	#__SQUAD_TYPE
 
__quad_t


	)

107 
	#__UQUAD_TYPE
 
__u_quad_t


	)

108 
	#__SWORD_TYPE
 

	)

109 
	#__UWORD_TYPE
 

	)

110 
	#__SLONG32_TYPE
 

	)

111 
	#__ULONG32_TYPE
 

	)

112 
	#__S64_TYPE
 
__quad_t


	)

113 
	#__U64_TYPE
 
__u_quad_t


	)

116 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

117 #ñi‡
__WORDSIZE
 == 64

118 
	t__SQUAD_TYPE
 

	)

119 
	t__UQUAD_TYPE
 

	)

120 
	t__SWORD_TYPE
 

	)

121 
	t__UWORD_TYPE
 

	)

122 
	t__SLONG32_TYPE
 

	)

123 
	t__ULONG32_TYPE
 

	)

124 
	t__S64_TYPE
 

	)

125 
	t__U64_TYPE
 

	)

127 
	t__STD_TYPE
 

	)

131 
	~<bôs/ty≥sizes.h
>

134 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

135 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

136 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

137 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

138 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

139 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

140 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

141 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

142 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

143 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

144 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

145 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

146 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

147 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

148 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

149 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

150 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

151 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

153 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

154 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

155 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

158 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

161 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

164 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

169 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

170 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

173 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

174 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

177 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

178 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

180 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__off64_t
 
	t__loff_t
;

185 
__quad_t
 *
	t__qaddr_t
;

186 *
	t__ˇddr_t
;

189 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

192 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

195 #unde‡
__STD_TYPE


	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/gnu/stubs.h

4 
	~<bôs/w‹dsize.h
>

6 #i‡
__WORDSIZE
 == 32

7 
	~<gnu/°ubs-32.h
>

8 #ñi‡
__WORDSIZE
 == 64

9 
	~<gnu/°ubs-64.h
>

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__NFDBITS


22 
	#__NFDBITS
 (8 * ())

	)

24 #unde‡
__FD_SETSIZE


25 
	#__FD_SETSIZE
 1024

	)

27 #unde‡
__FDSET_LONGS


28 
	#__FDSET_LONGS
 (
__FD_SETSIZE
/
__NFDBITS
)

	)

30 #unde‡
__FDELT


31 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

33 #unde‡
__FDMASK


34 
	#__FDMASK
(
d
Ë(1UL << ((dË% 
__NFDBITS
))

	)

37 
	mfds_bôs
 [
__FDSET_LONGS
];

38 } 
	t__kî√l_fd_£t
;

41 (*
	t__kî√l_sigh™dÀr_t
)();

44 
	t__kî√l_key_t
;

45 
	t__kî√l_mqd_t
;

47 
	~<asm/posix_ty≥s.h
>

	@/usr/include/sys/cdefs.h

20 #i‚def 
_SYS_CDEFS_H


21 
	#_SYS_CDEFS_H
 1

	)

24 #i‚de‡
_FEATURES_H


25 
	~<„©uªs.h
>

31 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


36 #unde‡
__P


37 #unde‡
__PMT


39 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


44 
	#__LEAF
 , 
__Àaf__


	)

45 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

47 
	#__LEAF


	)

48 
	#__LEAF_ATTR


	)

56 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

57 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

58 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

59 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

61 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

62 
	#__THROW
 
	`throw
 ()

	)

63 
	#__THROWNL
 
	`throw
 ()

	)

64 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

66 
	#__THROW


	)

67 
	#__THROWNL


	)

68 
	#__NTH
(
f˘
Ë
	)
fct

74 
	#__ölöe


	)

76 
	#__THROW


	)

77 
	#__THROWNL


	)

78 
	#__NTH
(
f˘
Ë
	)
fct

80 
	#__c⁄°
 c⁄°

	)

81 
	#__sig√d
 sig√d

	)

82 
	#__vﬁ©ûe
 vﬁ©ûe

	)

88 
	#__P
(
¨gs
Ë
	)
args

89 
	#__PMT
(
¨gs
Ë
	)
args

94 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

95 
	#__STRING
(
x
Ë#x

	)

98 
	#__±r_t
 *

	)

99 
	#__l⁄g_doubÀ_t
 

	)

103 #ifdef 
__˝lu•lus


104 
	#__BEGIN_DECLS
 "C" {

	)

105 
	#__END_DECLS
 }

	)

107 
	#__BEGIN_DECLS


	)

108 
	#__END_DECLS


	)

117 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


118 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

119 
	#__END_NAMESPACE_STD
 }

	)

120 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

121 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

122 
	#__END_NAMESPACE_C99
 }

	)

123 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

128 
	#__BEGIN_NAMESPACE_STD


	)

129 
	#__END_NAMESPACE_STD


	)

130 
	#__USING_NAMESPACE_STD
(
«me
)

	)

131 
	#__BEGIN_NAMESPACE_C99


	)

132 
	#__END_NAMESPACE_C99


	)

133 
	#__USING_NAMESPACE_C99
(
«me
)

	)

138 #i‚de‡
__BOUNDED_POINTERS__


139 
	#__bounded


	)

140 
	#__unbounded


	)

141 
	#__±rvÆue


	)

146 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

147 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

149 #i‡
__GNUC_PREREQ
 (4,3)

150 
	#__w¨nde˛
(
«me
, 
msg
) \

151 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

152 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

153 
	#__îr‹de˛
(
«me
, 
msg
) \

154 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

156 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

157 
	#__w¨«âr
(
msg
)

	)

158 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

162 #i‡
__GNUC_PREREQ
 (2,97)

164 
	#__Êex¨r
 []

	)

166 #ifde‡
__GNUC__


167 
	#__Êex¨r
 [0]

	)

169 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

170 
	#__Êex¨r
 []

	)

173 
	#__Êex¨r
 [1]

	)

189 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

191 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

192 #ifde‡
__˝lu•lus


193 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

194 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

195 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

196 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

198 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

199 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

200 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

201 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

203 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

204 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

217 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

218 
	#__©åibuã__
(
xyz
Ë

	)

224 #i‡
__GNUC_PREREQ
 (2,96)

225 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

227 
	#__©åibuã_mÆloc__


	)

233 #i‡
__GNUC_PREREQ
 (2,96)

234 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

236 
	#__©åibuã_puª__


	)

240 #i‡
__GNUC_PREREQ
 (2,5)

241 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

243 
	#__©åibuã_c⁄°__


	)

249 #i‡
__GNUC_PREREQ
 (3,1)

250 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

251 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

253 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

254 
	#__©åibuã_noölöe__


	)

258 #i‡
__GNUC_PREREQ
 (3,2)

259 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

261 
	#__©åibuã_dïªˇãd__


	)

270 #i‡
__GNUC_PREREQ
 (2,8)

271 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

273 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

280 #i‡
__GNUC_PREREQ
 (2,97)

281 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

282 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

284 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

289 #i‡
__GNUC_PREREQ
 (3,3)

290 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

292 
	#__n⁄nuŒ
(
∑øms
)

	)

297 #i‡
__GNUC_PREREQ
 (3,4)

298 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

299 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

300 #i‡
__USE_FORTIFY_LEVEL
 > 0

301 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

304 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

306 #i‚de‡
__wur


307 
	#__wur


	)

311 #i‡
__GNUC_PREREQ
 (3,2)

312 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

314 
	#__Æways_ölöe
 
__ölöe


	)

319 #i‡!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3)

320 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


321 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

322 #i‡
__GNUC_PREREQ
 (4,3)

323 
	#__exã∫_Æways_ölöe
 \

324 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
, 
__¨tificül__
))

	)

326 
	#__exã∫_Æways_ölöe
 \

327 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

330 
	#__exã∫_ölöe
 
__ölöe


	)

331 #i‡
__GNUC_PREREQ
 (4,3)

332 
	#__exã∫_Æways_ölöe
 \

333 
__Æways_ölöe
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

335 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

342 #i‡
__GNUC_PREREQ
 (4,3)

343 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

344 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

351 #i‡!
__GNUC_PREREQ
 (2,8)

352 
	#__exãnsi⁄__


	)

356 #i‡!
__GNUC_PREREQ
 (2,92)

357 
	#__ª°ri˘


	)

363 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


364 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

366 #ifde‡
__GNUC__


367 
	#__ª°ri˘_¨r


	)

369 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

370 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

373 
	#__ª°ri˘_¨r


	)

378 
	~<bôs/w‹dsize.h
>

380 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


381 
	#__LDBL_COMPAT
 1

	)

382 #ifde‡
__REDIRECT


383 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

384 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

385 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

386 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

387 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

388 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

389 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

390 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

391 
	#__LDBL_REDIR_DECL
(
«me
) \

392 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

393 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

394 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

395 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

396 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

399 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


400 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

401 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

402 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

403 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

404 
	#__LDBL_REDIR_DECL
(
«me
)

	)

405 #ifde‡
__REDIRECT


406 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

407 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

408 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/sys/select.h

22 #i‚de‡
_SYS_SELECT_H


23 
	#_SYS_SELECT_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

31 
	~<bôs/£À˘.h
>

34 
	~<bôs/sig£t.h
>

36 #i‚de‡
__sig£t_t_deföed


37 
	#__sig£t_t_deföed


	)

38 
__sig£t_t
 
	tsig£t_t
;

42 
	#__√ed_time_t


	)

43 
	#__√ed_time•ec


	)

44 
	~<time.h
>

45 
	#__√ed_timevÆ


	)

46 
	~<bôs/time.h
>

48 #i‚de‡
__su£c⁄ds_t_deföed


49 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

50 
	#__su£c⁄ds_t_deföed


	)

55 
	t__fd_mask
;

58 #unde‡
__NFDBITS


60 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

61 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

62 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

69 #ifde‡
__USE_XOPEN


70 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

71 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

73 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

74 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

76 } 
	tfd_£t
;

79 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

81 #ifde‡
__USE_MISC


83 
__fd_mask
 
	tfd_mask
;

86 
	#NFDBITS
 
__NFDBITS


	)

91 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

92 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

93 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

94 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

97 
__BEGIN_DECLS


107 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

108 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

109 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

110 
timevÆ
 *
__ª°ri˘
 
__timeout
);

112 #ifde‡
__USE_XOPEN2K


119 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

120 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

121 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

122 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

123 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

128 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


129 
	~<bôs/£À˘2.h
>

132 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

21 #i‚de‡
_SYS_SYSMACROS_H


22 
	#_SYS_SYSMACROS_H
 1

	)

24 
	~<„©uªs.h
>

29 #ifde‡
__GLIBC_HAVE_LONG_LONG


30 
__BEGIN_DECLS


32 
__exãnsi⁄__


33 
	$gnu_dev_maj‹
 (
__dev
)

34 
__THROW
 
__©åibuã_c⁄°__
;

35 
__exãnsi⁄__


36 
	$gnu_dev_mö‹
 (
__dev
)

37 
__THROW
 
__©åibuã_c⁄°__
;

38 
__exãnsi⁄__


39 
	$gnu_dev_makedev
 (
__maj‹
,

40 
__mö‹
)

41 
__THROW
 
__©åibuã_c⁄°__
;

43 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


44 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

45 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

47  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

48 
	}
}

50 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

51 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

53  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

54 
	}
}

56 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

57 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

59  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

60 | (((Ë(
__mö‹
 & ~0xff)) << 12)

61 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

62 
	}
}

64 
	g__END_DECLS


67 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

68 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

69 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/ttydefaults.h

40 #i‚de‡
_SYS_TTYDEFAULTS_H_


41 
	#_SYS_TTYDEFAULTS_H_


	)

46 
	#TTYDEF_IFLAG
 (
BRKINT
 | 
ISTRIP
 | 
ICRNL
 | 
IMAXBEL
 | 
IXON
 | 
IXANY
)

	)

47 
	#TTYDEF_OFLAG
 (
OPOST
 | 
ONLCR
 | 
XTABS
)

	)

48 
	#TTYDEF_LFLAG
 (
ECHO
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
 | 
ECHOE
|
ECHOKE
|
ECHOCTL
)

	)

49 
	#TTYDEF_CFLAG
 (
CREAD
 | 
CS7
 | 
PARENB
 | 
HUPCL
)

	)

50 
	#TTYDEF_SPEED
 (
B9600
)

	)

55 
	#CTRL
(
x
Ë(x&037)

	)

56 
	#CEOF
 
	`CTRL
('d')

	)

57 #ifde‡
_POSIX_VDISABLE


58 
	#CEOL
 
_POSIX_VDISABLE


	)

60 
	#CEOL
 '\0'

	)

62 
	#CERASE
 0177

	)

63 
	#CINTR
 
	`CTRL
('c')

	)

64 #ifde‡
_POSIX_VDISABLE


65 
	#CSTATUS
 
_POSIX_VDISABLE


	)

67 
	#CSTATUS
 '\0'

	)

69 
	#CKILL
 
	`CTRL
('u')

	)

70 
	#CMIN
 1

	)

71 
	#CQUIT
 034

	)

72 
	#CSUSP
 
	`CTRL
('z')

	)

73 
	#CTIME
 0

	)

74 
	#CDSUSP
 
	`CTRL
('y')

	)

75 
	#CSTART
 
	`CTRL
('q')

	)

76 
	#CSTOP
 
	`CTRL
('s')

	)

77 
	#CLNEXT
 
	`CTRL
('v')

	)

78 
	#CDISCARD
 
	`CTRL
('o')

	)

79 
	#CWERASE
 
	`CTRL
('w')

	)

80 
	#CREPRINT
 
	`CTRL
('r')

	)

81 
	#CEOT
 
CEOF


	)

83 
	#CBRK
 
CEOL


	)

84 
	#CRPRNT
 
CREPRINT


	)

85 
	#CFLUSH
 
CDISCARD


	)

93 #ifde‡
TTYDEFCHARS


94 
cc_t
 
	gâydefch¨s
[
NCCS
] = {

95 
CEOF
, 
CEOL
, CEOL, 
CERASE
, 
CWERASE
, 
CKILL
, 
CREPRINT
,

96 
_POSIX_VDISABLE
, 
CINTR
, 
CQUIT
, 
CSUSP
, 
CDSUSP
, 
CSTART
, 
CSTOP
, 
CLNEXT
,

97 
CDISCARD
, 
CMIN
, 
CTIME
, 
CSTATUS
, 
_POSIX_VDISABLE


99 #unde‡
TTYDEFCHARS


	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/asm-generic/types.h

1 #i‚de‡
_ASM_GENERIC_TYPES_H


2 
	#_ASM_GENERIC_TYPES_H


	)

7 
	~<asm-gíîic/öt-Œ64.h
>

9 #i‚de‡
__ASSEMBLY__


11 
	tumode_t
;

	@/usr/include/asm/ioctls.h

1 
	~<asm-gíîic/io˘ls.h
>

	@/usr/include/asm/posix_types.h

1 #ifde‡
__i386__


2 
	~<asm/posix_ty≥s_32.h
>

4 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/bits/byteswap.h

21 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


25 #i‚de‡
_BITS_BYTESWAP_H


26 
	#_BITS_BYTESWAP_H
 1

	)

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

34 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

35 
	#__bsw≠_16
(
x
) \

36 (
__exãnsi⁄__
 \

37 ({ 
__v
, 
__x
 = (Ë(
x
); \

38 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

39 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

41 
	`__asm__
 ("rorw $8, %w0" \

42 : "Ù" (
__v
) \

43 : "0" (
__x
) \

45 
__v
; }))

	)

48 
	#__bsw≠_16
(
x
) \

49 (
__exãnsi⁄__
 \

50 ({ 
__x
 = (Ë(
x
); \

51 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

56 
	#__bsw≠_c⁄°™t_32
(
x
) \

57 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

58 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

60 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

61 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

62 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

63 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

64 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

65 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

66 || 
deföed
 
	g__amdÁm10__
)

69 
	#__bsw≠_32
(
x
) \

70 (
__exãnsi⁄__
 \

71 ({ 
__v
, 
__x
 = (
x
); \

72 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

73 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

75 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

76 
__v
; }))

	)

78 
	#__bsw≠_32
(
x
) \

79 (
__exãnsi⁄__
 \

80 ({ 
__v
, 
__x
 = (
x
); \

81 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

82 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

84 
	`__asm__
 ("rorw $8, %w0;" \

87 : "Ù" (
__v
) \

88 : "0" (
__x
) \

90 
__v
; }))

	)

93 
	#__bsw≠_32
(
x
) \

94 (
__exãnsi⁄__
 \

95 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

99 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

101 
	#__bsw≠_c⁄°™t_64
(
x
) \

102 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

103 | (((
x
) & 0x00ff000000000000ull) >> 40) \

104 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

105 | (((
x
) & 0x000000ff00000000ull) >> 8) \

106 | (((
x
) & 0x00000000ff000000ull) << 8) \

107 | (((
x
) & 0x0000000000ff0000ull) << 24) \

108 | (((
x
) & 0x000000000000ff00ull) << 40) \

109 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

111 #i‡
__WORDSIZE
 == 64

112 
	#__bsw≠_64
(
x
) \

113 (
__exãnsi⁄__
 \

114 ({ 
__v
, 
__x
 = (
x
); \

115 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

116 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

118 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

119 
__v
; }))

	)

121 
	#__bsw≠_64
(
x
) \

122 (
__exãnsi⁄__
 \

123 ({ uni⁄ { 
__exãnsi⁄__
 
__Œ
; \

124 
__l
[2]; } 
__w
, 
__r
; \

125 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

126 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

129 
__w
.
__Œ
 = (
x
); \

130 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

131 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

133 
__r
.
__Œ
; }))

	)

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/select.h

19 #i‚de‡
_SYS_SELECT_H


23 
	~<bôs/w‹dsize.h
>

26 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

28 #i‡
__WORDSIZE
 == 64

29 
	#__FD_ZERO_STOS
 "°osq"

	)

31 
	#__FD_ZERO_STOS
 "°o¶"

	)

34 
	#__FD_ZERO
(
fd•
) \

36 
__d0
, 
__d1
; \

37 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

38 : "=c" (
__d0
), "=D" (
__d1
) \

39 : "a" (0), "0" ( (
fd_£t
) \

40 /  (
__fd_mask
)), \

41 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

43 } 0)

	)

49 
	#__FD_ZERO
(
£t
) \

51 
__i
; \

52 
fd_£t
 *
__¨r
 = (
£t
); \

53 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

54 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

55 } 0)

	)

59 
	#__FD_SET
(
d
, 
£t
) \

60 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

61 
	#__FD_CLR
(
d
, 
£t
) \

62 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

63 
	#__FD_ISSET
(
d
, 
£t
) \

64 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

20 #i‚de‡
_SYS_SELECT_H


25 
__fdñt_chk
 (
__d
);

26 
	$__fdñt_w¨n
 (
__d
)

27 
	`__w¨«âr
 ("bit outside of fd_set selected");

28 #unde‡
__FD_ELT


29 
	#__FD_ELT
(
d
) \

30 
__exãnsi⁄__
 \

31 ({ 
__d
 = (
d
); \

32 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

33 ? (
__d
 >
__FD_SETSIZE
 \

34 ? 
	`__fdñt_w¨n
 (
__d
Ë: (__d / 
__NFDBITS
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/sigset.h

21 #i‚def 
_SIGSET_H_ty≥s


22 
	#_SIGSET_H_ty≥s
 1

	)

24 
	t__sig_©omic_t
;

28 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

31 
	m__vÆ
[
_SIGSET_NWORDS
];

32 } 
	t__sig£t_t
;

43 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


44 
	#_SIGSET_H_‚s
 1

	)

46 #i‚de‡
_EXTERN_INLINE


47 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

51 
	#__sigmask
(
sig
) \

52 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

55 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

57 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

58 
	#__sigem±y£t
(
£t
) \

59 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

60 
sig£t_t
 *
__£t
 = (
£t
); \

61 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

62 0; }))

	)

63 
	#__sigfûl£t
(
£t
) \

64 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

65 
sig£t_t
 *
__£t
 = (
£t
); \

66 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

67 0; }))

	)

69 #ifde‡
__USE_GNU


73 
	#__sigi£m±y£t
(
£t
) \

74 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

75 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

76 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

77 !
__ªt
 && --
__˙t
 >= 0) \

78 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

79 
__ªt
 =0; }))

	)

80 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

81 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

82 
sig£t_t
 *
__de°
 = (
de°
); \

83 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

84 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

85 --
__˙t
 >= 0) \

86 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

87 & 
__right
->
__vÆ
[
__˙t
]); \

88 0; }))

	)

89 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

90 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

91 
sig£t_t
 *
__de°
 = (
de°
); \

92 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

93 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

94 --
__˙t
 >= 0) \

95 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

96 | 
__right
->
__vÆ
[
__˙t
]); \

97 0; }))

	)

104 
__sigismembî
 (
__c⁄°
 
__sig£t_t
 *, );

105 
__sigadd£t
 (
__sig£t_t
 *, );

106 
__sigdñ£t
 (
__sig£t_t
 *, );

108 #ifde‡
__USE_EXTERN_INLINES


109 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

110 
_EXTERN_INLINE
 \

111 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

113 
__mask
 = 
	`__sigmask
 (
__sig
); \

114 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

115  
BODY
; \

116 }

	)

118 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
Ë? 1 : 0, 
__c⁄°
)

119 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

120 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

122 #unde‡
__SIGSETFN


	@/usr/include/bits/timex.h

19 #i‚def 
_BITS_TIMEX_H


20 
	#_BITS_TIMEX_H
 1

	)

24 
	stimex


26 
	mmodes
;

27 
	moff£t
;

28 
	m‰eq
;

29 
	mmaxîr‹
;

30 
	me°îr‹
;

31 
	m°©us
;

32 
	mc⁄°™t
;

33 
	m¥ecisi⁄
;

34 
	mtﬁî™˚
;

35 
timevÆ
 
	mtime
;

36 
	mtick
;

38 
	mµs‰eq
;

39 
	mjôãr
;

40 
	mshi·
;

41 
	m°abû
;

42 
	mjô˙t
;

43 
	mˇl˙t
;

44 
	mîr˙t
;

45 
	m°b˙t
;

47 
	mèi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_MICRO
 0x1000

	)

64 
	#ADJ_NANO
 0x2000

	)

65 
	#ADJ_TICK
 0x4000

	)

66 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

67 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

70 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

71 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

72 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

73 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

74 
	#MOD_STATUS
 
ADJ_STATUS


	)

75 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

76 
	#MOD_CLKB
 
ADJ_TICK


	)

77 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

78 
	#MOD_TAI
 
ADJ_TAI


	)

79 
	#MOD_MICRO
 
ADJ_MICRO


	)

80 
	#MOD_NANO
 
ADJ_NANO


	)

84 
	#STA_PLL
 0x0001

	)

85 
	#STA_PPSFREQ
 0x0002

	)

86 
	#STA_PPSTIME
 0x0004

	)

87 
	#STA_FLL
 0x0008

	)

89 
	#STA_INS
 0x0010

	)

90 
	#STA_DEL
 0x0020

	)

91 
	#STA_UNSYNC
 0x0040

	)

92 
	#STA_FREQHOLD
 0x0080

	)

94 
	#STA_PPSSIGNAL
 0x0100

	)

95 
	#STA_PPSJITTER
 0x0200

	)

96 
	#STA_PPSWANDER
 0x0400

	)

97 
	#STA_PPSERROR
 0x0800

	)

99 
	#STA_CLOCKERR
 0x1000

	)

100 
	#STA_NANO
 0x2000

	)

101 
	#STA_MODE
 0x4000

	)

102 
	#STA_CLK
 0x8000

	)

105 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

106 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 *

	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___kî√l_co¶


	)

11 
	#__°ub___kî√l_söl


	)

12 
	#__°ub___kî√l_è∆


	)

13 
	#__°ub_chÊags


	)

14 
	#__°ub_Áâach


	)

15 
	#__°ub_fchÊags


	)

16 
	#__°ub_fdëach


	)

17 
	#__°ub_gây


	)

18 
	#__°ub_lchmod


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/linux/stddef.h

1 #i‚de‡
_LINUX_STDDEF_H


2 
	#_LINUX_STDDEF_H


	)

6 #unde‡
NULL


7 #i‡
deföed
(
__˝lu•lus
)

8 
	#NULL
 0

	)

10 
	#NULL
 ((*)0)

	)

	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/asm-generic/int-ll64.h

8 #i‚de‡
_ASM_GENERIC_INT_LL64_H


9 
	#_ASM_GENERIC_INT_LL64_H


	)

11 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__ASSEMBLY__


19 
__sig√d__
 
	t__s8
;

20 
	t__u8
;

22 
__sig√d__
 
	t__s16
;

23 
	t__u16
;

25 
__sig√d__
 
	t__s32
;

26 
	t__u32
;

28 #ifde‡
__GNUC__


29 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

30 
__exãnsi⁄__
 
	t__u64
;

32 
__sig√d__
 
	t__s64
;

33 
	t__u64
;

	@/usr/include/asm-generic/ioctls.h

1 #i‚de‡
__ASM_GENERIC_IOCTLS_H


2 
	#__ASM_GENERIC_IOCTLS_H


	)

4 
	~<löux/io˘l.h
>

19 
	#TCGETS
 0x5401

	)

20 
	#TCSETS
 0x5402

	)

21 
	#TCSETSW
 0x5403

	)

22 
	#TCSETSF
 0x5404

	)

23 
	#TCGETA
 0x5405

	)

24 
	#TCSETA
 0x5406

	)

25 
	#TCSETAW
 0x5407

	)

26 
	#TCSETAF
 0x5408

	)

27 
	#TCSBRK
 0x5409

	)

28 
	#TCXONC
 0x540A

	)

29 
	#TCFLSH
 0x540B

	)

30 
	#TIOCEXCL
 0x540C

	)

31 
	#TIOCNXCL
 0x540D

	)

32 
	#TIOCSCTTY
 0x540E

	)

33 
	#TIOCGPGRP
 0x540F

	)

34 
	#TIOCSPGRP
 0x5410

	)

35 
	#TIOCOUTQ
 0x5411

	)

36 
	#TIOCSTI
 0x5412

	)

37 
	#TIOCGWINSZ
 0x5413

	)

38 
	#TIOCSWINSZ
 0x5414

	)

39 
	#TIOCMGET
 0x5415

	)

40 
	#TIOCMBIS
 0x5416

	)

41 
	#TIOCMBIC
 0x5417

	)

42 
	#TIOCMSET
 0x5418

	)

43 
	#TIOCGSOFTCAR
 0x5419

	)

44 
	#TIOCSSOFTCAR
 0x541A

	)

45 
	#FIONREAD
 0x541B

	)

46 
	#TIOCINQ
 
FIONREAD


	)

47 
	#TIOCLINUX
 0x541C

	)

48 
	#TIOCCONS
 0x541D

	)

49 
	#TIOCGSERIAL
 0x541E

	)

50 
	#TIOCSSERIAL
 0x541F

	)

51 
	#TIOCPKT
 0x5420

	)

52 
	#FIONBIO
 0x5421

	)

53 
	#TIOCNOTTY
 0x5422

	)

54 
	#TIOCSETD
 0x5423

	)

55 
	#TIOCGETD
 0x5424

	)

56 
	#TCSBRKP
 0x5425

	)

57 
	#TIOCSBRK
 0x5427

	)

58 
	#TIOCCBRK
 0x5428

	)

59 
	#TIOCGSID
 0x5429

	)

60 
	#TCGETS2
 
	`_IOR
('T', 0x2A, 
ãrmios2
)

	)

61 
	#TCSETS2
 
	`_IOW
('T', 0x2B, 
ãrmios2
)

	)

62 
	#TCSETSW2
 
	`_IOW
('T', 0x2C, 
ãrmios2
)

	)

63 
	#TCSETSF2
 
	`_IOW
('T', 0x2D, 
ãrmios2
)

	)

64 
	#TIOCGRS485
 0x542E

	)

65 #i‚de‡
TIOCSRS485


66 
	#TIOCSRS485
 0x542F

	)

68 
	#TIOCGPTN
 
	`_IOR
('T', 0x30, Ë

	)

69 
	#TIOCSPTLCK
 
	`_IOW
('T', 0x31, Ë

	)

70 
	#TIOCGDEV
 
	`_IOR
('T', 0x32, Ë

	)

71 
	#TCGETX
 0x5432

	)

72 
	#TCSETX
 0x5433

	)

73 
	#TCSETXF
 0x5434

	)

74 
	#TCSETXW
 0x5435

	)

75 
	#TIOCSIG
 
	`_IOW
('T', 0x36, Ë

	)

76 
	#TIOCVHANGUP
 0x5437

	)

78 
	#FIONCLEX
 0x5450

	)

79 
	#FIOCLEX
 0x5451

	)

80 
	#FIOASYNC
 0x5452

	)

81 
	#TIOCSERCONFIG
 0x5453

	)

82 
	#TIOCSERGWILD
 0x5454

	)

83 
	#TIOCSERSWILD
 0x5455

	)

84 
	#TIOCGLCKTRMIOS
 0x5456

	)

85 
	#TIOCSLCKTRMIOS
 0x5457

	)

86 
	#TIOCSERGSTRUCT
 0x5458

	)

87 
	#TIOCSERGETLSR
 0x5459

	)

88 
	#TIOCSERGETMULTI
 0x545A

	)

89 
	#TIOCSERSETMULTI
 0x545B

	)

91 
	#TIOCMIWAIT
 0x545C

	)

92 
	#TIOCGICOUNT
 0x545D

	)

98 #i‚de‡
FIOQSIZE


99 
	#FIOQSIZE
 0x5460

	)

103 
	#TIOCPKT_DATA
 0

	)

104 
	#TIOCPKT_FLUSHREAD
 1

	)

105 
	#TIOCPKT_FLUSHWRITE
 2

	)

106 
	#TIOCPKT_STOP
 4

	)

107 
	#TIOCPKT_START
 8

	)

108 
	#TIOCPKT_NOSTOP
 16

	)

109 
	#TIOCPKT_DOSTOP
 32

	)

110 
	#TIOCPKT_IOCTL
 64

	)

112 
	#TIOCSER_TEMT
 0x01

	)

	@/usr/include/asm/posix_types_32.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_32_H


2 
	#_ASM_X86_POSIX_TYPES_32_H


	)

10 
	t__kî√l_öo_t
;

11 
	t__kî√l_mode_t
;

12 
	t__kî√l_∆ök_t
;

13 
	t__kî√l_off_t
;

14 
	t__kî√l_pid_t
;

15 
	t__kî√l_ùc_pid_t
;

16 
	t__kî√l_uid_t
;

17 
	t__kî√l_gid_t
;

18 
	t__kî√l_size_t
;

19 
	t__kî√l_ssize_t
;

20 
	t__kî√l_±rdiff_t
;

21 
	t__kî√l_time_t
;

22 
	t__kî√l_su£c⁄ds_t
;

23 
	t__kî√l_˛ock_t
;

24 
	t__kî√l_timî_t
;

25 
	t__kî√l_˛ockid_t
;

26 
	t__kî√l_daddr_t
;

27 * 
	t__kî√l_ˇddr_t
;

28 
	t__kî√l_uid16_t
;

29 
	t__kî√l_gid16_t
;

30 
	t__kî√l_uid32_t
;

31 
	t__kî√l_gid32_t
;

33 
	t__kî√l_ﬁd_uid_t
;

34 
	t__kî√l_ﬁd_gid_t
;

35 
	t__kî√l_ﬁd_dev_t
;

37 #ifde‡
__GNUC__


38 
	t__kî√l_loff_t
;

42 
	mvÆ
[2];

43 } 
	t__kî√l_fsid_t
;

	@/usr/include/asm/posix_types_64.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_64_H


2 
	#_ASM_X86_POSIX_TYPES_64_H


	)

10 
	t__kî√l_öo_t
;

11 
	t__kî√l_mode_t
;

12 
	t__kî√l_∆ök_t
;

13 
	t__kî√l_off_t
;

14 
	t__kî√l_pid_t
;

15 
	t__kî√l_ùc_pid_t
;

16 
	t__kî√l_uid_t
;

17 
	t__kî√l_gid_t
;

18 
	t__kî√l_size_t
;

19 
	t__kî√l_ssize_t
;

20 
	t__kî√l_±rdiff_t
;

21 
	t__kî√l_time_t
;

22 
	t__kî√l_su£c⁄ds_t
;

23 
	t__kî√l_˛ock_t
;

24 
	t__kî√l_timî_t
;

25 
	t__kî√l_˛ockid_t
;

26 
	t__kî√l_daddr_t
;

27 * 
	t__kî√l_ˇddr_t
;

28 
	t__kî√l_uid16_t
;

29 
	t__kî√l_gid16_t
;

31 #ifde‡
__GNUC__


32 
	t__kî√l_loff_t
;

36 
	mvÆ
[2];

37 } 
	t__kî√l_fsid_t
;

39 
	t__kî√l_ﬁd_uid_t
;

40 
	t__kî√l_ﬁd_gid_t
;

41 
__kî√l_uid_t
 
	t__kî√l_uid32_t
;

42 
__kî√l_gid_t
 
	t__kî√l_gid32_t
;

44 
	t__kî√l_ﬁd_dev_t
;

	@/usr/include/asm/bitsperlong.h

1 #i‚de‡
__ASM_X86_BITSPERLONG_H


2 
	#__ASM_X86_BITSPERLONG_H


	)

4 #ifde‡
__x86_64__


5 
	#__BITS_PER_LONG
 64

	)

7 
	#__BITS_PER_LONG
 32

	)

10 
	~<asm-gíîic/bô•îl⁄g.h
>

	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/asm-generic/bitsperlong.h

1 #i‚de‡
__ASM_GENERIC_BITS_PER_LONG


2 
	#__ASM_GENERIC_BITS_PER_LONG


	)

11 #i‚de‡
__BITS_PER_LONG


12 
	#__BITS_PER_LONG
 32

	)

	@/usr/include/asm/ioctl.h

1 
	~<asm-gíîic/io˘l.h
>

	@/usr/include/asm-generic/ioctl.h

1 #i‚de‡
_ASM_GENERIC_IOCTL_H


2 
	#_ASM_GENERIC_IOCTL_H


	)

22 
	#_IOC_NRBITS
 8

	)

23 
	#_IOC_TYPEBITS
 8

	)

30 #i‚de‡
_IOC_SIZEBITS


31 
	#_IOC_SIZEBITS
 14

	)

34 #i‚de‡
_IOC_DIRBITS


35 
	#_IOC_DIRBITS
 2

	)

38 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

39 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

40 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

41 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

43 
	#_IOC_NRSHIFT
 0

	)

44 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

45 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

46 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

53 #i‚de‡
_IOC_NONE


54 
	#_IOC_NONE
 0U

	)

57 #i‚de‡
_IOC_WRITE


58 
	#_IOC_WRITE
 1U

	)

61 #i‚de‡
_IOC_READ


62 
	#_IOC_READ
 2U

	)

65 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

66 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

67 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

68 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

69 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

71 
	#_IOC_TYPECHECK
(
t
Ë(—))

	)

74 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

75 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

76 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

77 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

78 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

79 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

80 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

83 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

84 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

85 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

86 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

90 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

91 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

92 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

93 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

94 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@
1
.
1
/usr/include
52
1397
MQ_sensors.h
SensorPackets.h
osp-sh.c
osp_i2c_map.h
/usr/include/linux/i2c.h
/usr/include/linux/input.h
/usr/include/stdint.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/features.h
/usr/include/linux/types.h
/usr/include/sys/ioctl.h
/usr/include/sys/time.h
/usr/include/sys/types.h
/usr/include/asm/types.h
/usr/include/bits/ioctl-types.h
/usr/include/bits/ioctls.h
/usr/include/bits/predefs.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/endian.h
/usr/include/gnu/stubs.h
/usr/include/linux/posix_types.h
/usr/include/sys/cdefs.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ttydefaults.h
/usr/include/time.h
/usr/include/asm-generic/types.h
/usr/include/asm/ioctls.h
/usr/include/asm/posix_types.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/sigset.h
/usr/include/bits/timex.h
/usr/include/bits/typesizes.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/linux/stddef.h
/usr/include/xlocale.h
/usr/include/asm-generic/int-ll64.h
/usr/include/asm-generic/ioctls.h
/usr/include/asm/posix_types_32.h
/usr/include/asm/posix_types_64.h
/usr/include/asm/bitsperlong.h
/usr/include/linux/ioctl.h
/usr/include/asm-generic/bitsperlong.h
/usr/include/asm/ioctl.h
/usr/include/asm-generic/ioctl.h
